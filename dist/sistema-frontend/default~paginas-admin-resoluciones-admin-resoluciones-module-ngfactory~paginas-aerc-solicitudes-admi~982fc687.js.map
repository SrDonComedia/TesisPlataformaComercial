{"version":3,"sources":["../../../../../../src/material/slide-toggle/slide-toggle-config.ts","../../../../../../src/material/slide-toggle/slide-toggle.ts","../../../../../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../../../../../src/material/slide-toggle/slide-toggle-module.ts","../../../../../../src/material/slide-toggle/public-api.ts","../../../../../../src/material/slide-toggle/index.ts"],"names":[],"mappings":"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","file":"default~paginas-admin-resoluciones-admin-resoluciones-module-ngfactory~paginas-aerc-solicitudes-admi~982fc687.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        // Only forward focus manually when it was received programmatically or through the\n        // keyboard. We should not do this for mouse/touch focus for two reasons:\n        // 1. It can prevent clicks from landing in Chrome (see #18269).\n        // 2. They're already handled by the wrapping `label` element.\n        if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n          this._inputElement.nativeElement.focus();\n        } else if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit();\n\n    // When the slide toggle's config disables toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change, and the\n    // checked state of the underlying input needs to be changed back.\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\nexport class _MatSlideToggleRequiredValidatorModule {}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slide-toggle-module';\nexport * from './slide-toggle';\nexport * from './slide-toggle-config';\nexport * from './slide-toggle-required-validator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"sourceRoot":"webpack:///"}