{"version":3,"sources":["../../../../../../src/material/progress-spinner/progress-spinner.ts","../../../../../../src/material/progress-spinner/progress-spinner-module.ts","../../../../../../src/material/progress-spinner/public-api.ts","../../../../../../src/material/progress-spinner/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AA6BA;;;;;AAIA,IAAM,SAAS,GAAG,GAAlB;;;;;;AAMA,IAAM,iBAAiB,GAAG,EAA1B,C;;;;IAIM,sB,GACJ,gCAAmB,WAAnB,EAA0C;AAAA;;AAAvB;AAA2B,C;;AAEhD,IAAM,4BAA4B,GAC9B,yEAAU,CAAC,sBAAD,EAAyB,SAAzB,CADd;;;;AAiBA,IAAa,oCAAoC,GAC7C,IAAI,4DAAJ,CAAqD,sCAArD,EAA6F;AAC3F,YAAU,EAAE,MAD+E;AAE3F,SAAO,EAAE;AAFkF,CAA7F,CADJ;;;AAOA,SAAgB,4CAAhB,GAA4D;AAC1D,SAAO;AAAC,YAAQ,EAAE;AAAX,GAAP;AACD,C;;;;;;AAMD,IAAM,gCAAgC,86CAAtC;;;;;IA+Ca,kB;;;;;AA6DX,8BAAmB,WAAnB,EACY,QADZ,EAEkD,SAFlD,EAGuD,aAHvD,EAKgB,QALhB,EAK2D;AAAA;;AAAA;;AAEzD,8BAAM,WAAN;AAPiB;AAE+B;AA9D1C,sBAAY,SAAZ;AACA,mBAAS,CAAT;AAEA,+BAAqB,KAArB;;;AA8CC,iBAA4B,aAA5B;AAoBP,QAAM,gBAAgB,GAAG,kBAAkB,CAAC,UAA5C;AACA,UAAK,sBAAL,GAA8B,MAAK,yBAAL,EAA9B,CALyD,C;;;AASzD,QAAI,CAAC,gBAAgB,CAAC,GAAjB,CAAqB,SAAS,CAAC,IAA/B,CAAL,EAA2C;AACzC,sBAAgB,CAAC,GAAjB,CAAqB,SAAS,CAAC,IAA/B,EAAqC,IAAI,GAAJ,CAAgB,CAAC,SAAD,CAAhB,CAArC;AACD;;AAED,UAAK,kBAAL,GAA0B,QAAQ,CAAC,IAAT,IAAiB,QAAQ,CAAC,OAApD;AACA,UAAK,eAAL,GAAuB,aAAa,KAAK,gBAAlB,IAClB,CAAC,CAAC,QAAF,IAAc,CAAC,QAAQ,CAAC,gBAD7B;;AAGA,QAAI,QAAJ,EAAc;AACZ,UAAI,QAAQ,CAAC,QAAb,EAAuB;AACrB,cAAK,QAAL,GAAgB,QAAQ,CAAC,QAAzB;AACD;;AAED,UAAI,QAAQ,CAAC,WAAb,EAA0B;AACxB,cAAK,WAAL,GAAmB,QAAQ,CAAC,WAA5B;AACD;AACF;;AAzBwD;AA0B1D;;;;;;SAhED,eACY;AAAa,aAAO,KAAK,SAAZ;AAAwB,K;SACjD,aAAa,IAAb,EAAyB;AACvB,WAAK,SAAL,GAAiB,kFAAoB,CAAC,IAAD,CAArC;AACA,WAAK,sBAAL,GAA8B,KAAK,yBAAL,EAA9B,CAFuB,C;;AAKvB,UAAI,CAAC,KAAK,kBAAN,IAA4B,KAAK,UAArC,EAAiD;AAC/C,aAAK,gBAAL;AACD;AACF;;;;;SAGD,eACe;AACb,aAAO,KAAK,YAAL,IAAqB,KAAK,QAAL,GAAgB,EAA5C;AACD,K;SACD,aAAgB,KAAhB,EAA6B;AAC3B,WAAK,YAAL,GAAoB,kFAAoB,CAAC,KAAD,CAAxC;AACD;;;;;SAMD,eACS;AACP,aAAO,KAAK,IAAL,KAAc,aAAd,GAA8B,KAAK,MAAnC,GAA4C,CAAnD;AACD,K;SACD,aAAU,QAAV,EAA0B;AACxB,WAAK,MAAL,GAAc,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,kFAAoB,CAAC,QAAD,CAAlC,CAAZ,CAAd;AACD;;;WAmCD,oBAAQ;AACN,UAAM,OAAO,GAAG,KAAK,WAAL,CAAiB,aAAjC,CADM,C;;;;AAMN,WAAK,UAAL,GAAkB,4EAAc,CAAC,OAAD,CAAd,IAA2B,KAAK,SAAL,CAAe,IAA5D;;AACA,WAAK,gBAAL,GAPM,C;;;;AAWN,UAAM,cAAc,+CACmB,KAAK,kBAAL,GAA0B,WAA1B,GAAwC,EAD3D,eAApB;AAGA,aAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,cAAtB;AACD;;;;;WAGD,4BAAgB;AACd,aAAO,CAAC,KAAK,QAAL,GAAgB,iBAAjB,IAAsC,CAA7C;AACD;;;;;WAGD,uBAAW;AACT,UAAM,OAAO,GAAG,KAAK,gBAAL,KAA0B,CAA1B,GAA8B,KAAK,WAAnD;AACA,2BAAc,OAAd,cAAyB,OAAzB;AACD;;;;;WAGD,mCAAuB;AACrB,aAAO,IAAI,IAAI,CAAC,EAAT,GAAc,KAAK,gBAAL,EAArB;AACD;;;;;WAGD,gCAAoB;AAClB,UAAI,KAAK,IAAL,KAAc,aAAlB,EAAiC;AAC/B,eAAO,KAAK,uBAAL,MAAkC,MAAM,KAAK,MAA7C,IAAuD,GAA9D;AACD,OAHiB,C;;;AAMlB,UAAI,KAAK,kBAAL,IAA2B,KAAK,IAAL,KAAc,eAA7C,EAA8D;AAC5D,eAAO,KAAK,uBAAL,KAAiC,GAAxC;AACD;;AAED,aAAO,IAAP;AACD;;;;;WAGD,iCAAqB;AACnB,aAAO,KAAK,WAAL,GAAmB,KAAK,QAAxB,GAAmC,GAA1C;AACD;;;;;WAGO,4BAAgB;AACtB,UAAM,SAAS,GAAG,KAAK,UAAvB;AACA,UAAM,eAAe,GAAG,KAAK,SAA7B;AACA,UAAM,SAAS,GAAG,kBAAkB,CAAC,UAArC;AACA,UAAI,mBAAmB,GAAG,SAAS,CAAC,GAAV,CAAc,SAAd,CAA1B;;AAEA,UAAI,CAAC,mBAAD,IAAwB,CAAC,mBAAmB,CAAC,GAApB,CAAwB,eAAxB,CAA7B,EAAuE;AACrE,YAAM,QAAQ,GAAqB,KAAK,SAAL,CAAe,aAAf,CAA6B,OAA7B,CAAnC;;AACA,gBAAQ,CAAC,YAAT,CAAsB,uBAAtB,EAA+C,KAAK,sBAApD;AACA,gBAAQ,CAAC,WAAT,GAAuB,KAAK,iBAAL,EAAvB;AACA,iBAAS,CAAC,WAAV,CAAsB,QAAtB;;AAEA,YAAI,CAAC,mBAAL,EAA0B;AACxB,6BAAmB,GAAG,IAAI,GAAJ,EAAtB;AACA,mBAAS,CAAC,GAAV,CAAc,SAAd,EAAyB,mBAAzB;AACD;;AAED,2BAAmB,CAAC,GAApB,CAAwB,eAAxB;AACD;AACF;;;;;WAGO,6BAAiB;AACvB,UAAM,mBAAmB,GAAG,KAAK,uBAAL,EAA5B;;AACA,aAAO,gCAAgC,C;AAAA,OAElC,OAFE,CAEM,cAFN,YAEyB,OAAO,mBAFhC,GAGF,OAHE,CAGM,YAHN,YAGuB,MAAM,mBAH7B,GAIF,OAJE,CAIM,WAJN,YAIsB,KAAK,sBAJ3B,EAAP;AAKD;;;;;WAGO,qCAAyB;;;AAG/B,aAAO,KAAK,QAAL,CAAc,QAAd,GAAyB,OAAzB,CAAiC,GAAjC,EAAsC,GAAtC,CAAP;AACD;;;;EAvLqC,4B;;;;;;;;;AAmBvB,gCAAa,IAAI,OAAJ,EAAb;;QAvChB,uD;AAAS,SAAC;AACT,YAAQ,EAAE,sBADD;AAET,YAAQ,EAAE,oBAFD;AAGT,QAAI,EAAE;AACJ,cAAQ,aADJ;AAEJ,eAAS,sBAFL;AAGJ,0DAHI;AAIJ,0BAAoB,UAJhB;AAKJ,2BAAqB,UALjB;AAMJ,8BAAwB,mCANpB;AAOJ,8BAAwB,qCAPpB;AAQJ,8BAAwB,uCARpB;AASJ,qBAAe;AATX,KAHG;AAcT,UAAM,EAAE,CAAC,OAAD,CAdC;AAeT,4rDAfS;AAiBT,mBAAe,EAAE,qEAAuB,CAAC,MAjBhC;AAkBT,iBAAa,EAAE,+DAAiB,CAAC,IAlBxB;;AAAA,GAAD;;;;;UA3FR,wDAAU;;UALJ,8DAAQ;;;;YAmLD,sDAAQ;OAAA;AAAA,YAAI,oDAAJ;AAAU,aAAC,wDAAD;AAAV,K;;;;YACR,sDAAQ;OAAA;AAAA,YAAI,oDAAJ;AAAU,aAAC,0FAAD;AAAV,K;;;;YACR,oD;AAAM,aAAC,oCAAD;;;;;;;UArClB,mDAAK;;;UAaL,mDAAK;;;UASL,mDAAK;;;UAGL,mDAAK;;;;;;;;;;IAgKK,U;;;;;AACX,sBAAY,UAAZ,EAAiD,QAAjD,EAC0C,QAD1C,EAEuD,aAFvD,EAIgB,QAJhB,EAI2D;AAAA;;AAAA;;AACzD,gCAAM,UAAN,EAAkB,QAAlB,EAA4B,QAA5B,EAAsC,aAAtC,EAAqD,QAArD;AACA,WAAK,IAAL,GAAY,eAAZ;AAFyD;AAG1D;;;EAR6B,kB;;;QAhB/B,uD;AAAS,SAAC;AACT,YAAQ,EAAE,aADD;AAET,QAAI,EAAE;AACJ,cAAQ,aADJ;AAEJ,cAAQ,eAFJ;AAGJ,eAAS,kCAHL;AAIJ,0DAJI;AAKJ,0BAAoB,UALhB;AAMJ,2BAAqB;AANjB,KAFG;AAUT,UAAM,EAAE,CAAC,OAAD,CAVC;AAWT,4rDAXS;AAaT,mBAAe,EAAE,qEAAuB,CAAC,MAbhC;AAcT,iBAAa,EAAE,+DAAiB,CAAC,IAdxB;;AAAA,GAAD;;;;;UApTR,wDAAU;;UALJ,8DAAQ;;;;YA2UD,sDAAQ;OAAA;AAAA,YAAI,oDAAJ;AAAU,aAAC,wDAAD;AAAV,K;;;;YACR,sDAAQ;OAAA;AAAA,YAAI,oDAAJ;AAAU,aAAC,0FAAD;AAAV,K;;;;YACR,oD;AAAM,aAAC,oCAAD;;;;ACtVrB;;;;;;;;;IAyBa,wB;;;;;QAZZ,sD;AAAQ,SAAC;AACR,WAAO,EAAE,CAAC,sEAAD,EAAkB,4DAAlB,CADD;AAER,WAAO,EAAE,CACP,kBADO,EAEP,UAFO,EAGP,sEAHO,CAFD;AAOR,gBAAY,EAAE,CACZ,kBADY,EAEZ,UAFY;AAPN,GAAD;;ACbT;;;;;;;;ACAA","file":"default~paginas-admin-resoluciones-admin-resoluciones-module-ngfactory~paginas-compromiso-docente-co~36ecee54.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Platform, _getShadowRoot} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** A string that is used for setting the spinner animation-name CSS property */\n  _spinnerAnimationLabel: string;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n    this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (!this._fallbackAnimation && this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n    this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element) || this._document.head;\n    this._attachStyleNode();\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    element.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  _getCircleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  _getViewBox() {\n    const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  _getStrokeCircumference(): number {\n    return 2 * Math.PI * this._getCircleRadius();\n  }\n\n  /** The dash offset of the svg circle. */\n  _getStrokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._getStrokeCircumference() * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._getStrokeCircumference() * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  _getCircleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag: HTMLStyleElement = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n\n      if (!diametersForElement) {\n        diametersForElement = new Set<number>();\n        diameters.set(styleRoot, diametersForElement);\n      }\n\n      diametersForElement.add(currentDiameter);\n    }\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    const strokeCircumference = this._getStrokeCircumference();\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);\n  }\n\n  /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n  private _getSpinnerAnimationLabel(): string {\n    // The string of a float point number will include a period â.â character,\n    // which is not valid for a CSS animation-name.\n    return this.diameter.toString().replace('.', '_');\n  }\n\n  static ngAcceptInputType_diameter: NumberInput;\n  static ngAcceptInputType_strokeWidth: NumberInput;\n  static ngAcceptInputType_value: NumberInput;\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nexport class MatProgressSpinnerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './progress-spinner-module';\nexport {\n  MatProgressSpinner,\n  MatSpinner,\n  MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,\n  ProgressSpinnerMode,\n  MatProgressSpinnerDefaultOptions,\n  MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n} from './progress-spinner';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"sourceRoot":"webpack:///"}