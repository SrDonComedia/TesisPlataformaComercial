import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class NgRecaptcha3Service {
    constructor() {
        this.baseUrl = 'https://www.google.com/recaptcha/api.js';
        this.siteKey = '';
        this.isLoaded = false;
        window['ngRecaptcha3Loaded'] = () => {
            this.isLoaded = true;
        };
        this.scriptId = +(new Date());
    }
    getToken(action) {
        try {
            return window['grecaptcha'].execute(this.siteKey, action);
        }
        catch (e) {
            return new Promise((resolve, reject) => {
                reject(e);
            });
        }
    }
    init(siteKey) {
        return new Promise((resolve, reject) => {
            if (this.isLoaded) {
                resolve('success');
                return;
            }
            else {
                this.siteKey = siteKey;
                const script = document.createElement('script');
                script.innerHTML = '';
                script.src = this.baseUrl + `?render=${this.siteKey}&onload=ngRecaptcha3Loaded`;
                script.id = `recapthcha-${this.scriptId}`;
                script.async = true;
                script.defer = true;
                script.onload = () => {
                    resolve('success');
                };
                script.onerror = () => {
                    reject('error');
                };
                document.head.appendChild(script);
            }
        });
    }
    destroy() {
        this.isLoaded = false;
        const script = document.getElementById(`recapthcha-${this.scriptId}`);
        if (script) {
            script.remove();
        }
        const badge = document.getElementsByClassName('grecaptcha-badge')[0];
        if (badge) {
            badge.remove();
        }
    }
}
NgRecaptcha3Service.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: NgRecaptcha3Service, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgRecaptcha3Service.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: NgRecaptcha3Service, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: NgRecaptcha3Service, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcmVjYXB0Y2hhMy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctcmVjYXB0Y2hhMy9zcmMvbGliL25nLXJlY2FwdGNoYTMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQU96QyxNQUFNLE9BQU8sbUJBQW1CO0lBUTlCO1FBTlEsWUFBTyxHQUFHLHlDQUF5QyxDQUFDO1FBQ3BELFlBQU8sR0FBRyxFQUFFLENBQUM7UUFDYixhQUFRLEdBQVksS0FBSyxDQUFDO1FBSy9CLE1BQWMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLEdBQUcsRUFBRTtZQUMzQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUN2QixDQUFDLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLFFBQVEsQ0FBQyxNQUFZO1FBQzFCLElBQUk7WUFDRixPQUFRLE1BQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNwRTtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDckMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1osQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTSxJQUFJLENBQUMsT0FBZTtRQUN6QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNuQixPQUFPO2FBQ1I7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7Z0JBQ3ZCLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ2hELE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2dCQUN0QixNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxJQUFJLENBQUMsT0FBTyw0QkFBNEIsQ0FBQztnQkFDaEYsTUFBTSxDQUFDLEVBQUUsR0FBRyxjQUFjLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDMUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtvQkFDbkIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNyQixDQUFDLENBQUE7Z0JBQ0QsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7b0JBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDbEIsQ0FBQyxDQUFDO2dCQUNGLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ25DO1FBRUgsQ0FBQyxDQUFDLENBQUM7SUFFTCxDQUFDO0lBSU0sT0FBTztRQUNmLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ25CLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsY0FBYyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUN0RSxJQUFJLE1BQU0sRUFBRTtZQUNWLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNqQjtRQUNELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLElBQUksS0FBSyxFQUFFO1lBQ1QsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2hCO0lBRUgsQ0FBQzs7Z0hBaEVVLG1CQUFtQjtvSEFBbkIsbUJBQW1CLGNBSGxCLE1BQU07MkZBR1AsbUJBQW1CO2tCQUovQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBOZ1JlY2FwdGNoYTNTZXJ2aWNlIHtcblxuICBwcml2YXRlIGJhc2VVcmwgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpLmpzJztcbiAgcHJpdmF0ZSBzaXRlS2V5ID0gJyc7XG4gIHByaXZhdGUgaXNMb2FkZWQ6IEJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBzY3JpcHRJZDtcblxuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAod2luZG93IGFzIGFueSlbJ25nUmVjYXB0Y2hhM0xvYWRlZCddID0gKCkgPT4ge1xuICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgfTtcbiAgICB0aGlzLnNjcmlwdElkID0gKyhuZXcgRGF0ZSgpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUb2tlbihhY3Rpb24/OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKHdpbmRvdyBhcyBhbnkpWydncmVjYXB0Y2hhJ10uZXhlY3V0ZSh0aGlzLnNpdGVLZXksIGFjdGlvbik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGluaXQoc2l0ZUtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzTG9hZGVkKSB7XG4gICAgICAgIHJlc29sdmUoJ3N1Y2Nlc3MnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaXRlS2V5ID0gc2l0ZUtleTtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHNjcmlwdC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgc2NyaXB0LnNyYyA9IHRoaXMuYmFzZVVybCArIGA/cmVuZGVyPSR7dGhpcy5zaXRlS2V5fSZvbmxvYWQ9bmdSZWNhcHRjaGEzTG9hZGVkYDtcbiAgICAgICAgc2NyaXB0LmlkID0gYHJlY2FwdGhjaGEtJHt0aGlzLnNjcmlwdElkfWA7XG4gICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgIHNjcmlwdC5kZWZlciA9IHRydWU7XG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZSgnc3VjY2VzcycpO1xuICAgICAgICB9XG4gICAgICAgIHNjcmlwdC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgIHJlamVjdCgnZXJyb3InKTtcbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgfVxuXG5cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcblx0dGhpcy5pc0xvYWRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGByZWNhcHRoY2hhLSR7dGhpcy5zY3JpcHRJZH1gKTtcbiAgICBpZiAoc2NyaXB0KSB7XG4gICAgICBzY3JpcHQucmVtb3ZlKCk7XG4gICAgfVxuICAgIGNvbnN0IGJhZGdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZ3JlY2FwdGNoYS1iYWRnZScpWzBdO1xuICAgIGlmIChiYWRnZSkge1xuICAgICAgYmFkZ2UucmVtb3ZlKCk7XG4gICAgfVxuXG4gIH1cblxuXG59XG4iXX0=