{"version":3,"sources":["../../../../../../src/cdk/accordion/accordion.ts","../../../../../../src/cdk/accordion/accordion-item.ts","../../../../../../src/cdk/accordion/accordion-module.ts","../../../../../../src/cdk/accordion/public-api.ts","../../../../../../src/cdk/accordion/index.ts","../../../../../../src/material/expansion/accordion-base.ts","../../../../../../src/material/expansion/expansion-animations.ts","../../../../../../src/material/expansion/expansion-panel-content.ts","../../../../../../src/material/expansion/expansion-panel.ts","../../../../../../src/material/expansion/expansion-panel-header.ts","../../../../../../src/material/expansion/accordion.ts","../../../../../../src/material/expansion/expansion-module.ts","../../../../../../src/material/expansion/public-api.ts","../../../../../../src/material/expansion/index.ts"],"names":["nextId"],"mappings":"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","file":"default~paginas-compromiso-docente-compromiso-form-compromiso-form-module-ngfactory~paginas-evaluaci~31984056.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, InjectionToken, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean { return this._multi; }\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    this._openCloseAll(true);\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAll(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  private _openCloseAll(expanded: boolean): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(expanded);\n    }\n  }\n\n  static ngAcceptInputType_multi: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): any { return this._expanded; }\n  set expanded(expanded: any) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(disabled: any) { this._disabled = coerceBooleanProperty(disabled); }\n  private _disabled: boolean = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(@Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n              private _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {CdkAccordionItem} from './accordion-item';\nexport {CdkAccordion} from './accordion';\nexport * from './accordion-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CDK_ACCORDION as Éµangular_material_src_cdk_accordion_accordion_a} from './accordion';","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['expansion-panel-header.css'],\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader implements AfterViewInit, OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string|null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {startWith} from 'rxjs/operators';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if multiple panel support is enabled.\n    '[class.mat-accordion-multi]': 'this.multi',\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  /** Headers belonging to this accordion. */\n  private _ownHeaders = new QueryList<MatExpansionPanelHeader>();\n\n  /** All headers inside the accordion. Includes headers inside nested accordions. */\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._headers.changes\n      .pipe(startWith(this._headers))\n      .subscribe((headers: QueryList<MatExpansionPanelHeader>) => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n        this._ownHeaders.notifyOnChanges();\n      });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    this._keyManager.onKeydown(event);\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './expansion-module';\nexport * from './accordion';\nexport * from './accordion-base';\nexport * from './expansion-panel';\nexport * from './expansion-panel-header';\nexport * from './expansion-panel-content';\nexport * from './expansion-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"sourceRoot":"webpack:///"}