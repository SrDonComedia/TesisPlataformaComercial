{"version":3,"sources":["../../../../../../src/material/checkbox/checkbox-config.ts","../../../../../../src/material/checkbox/checkbox.ts","../../../../../../src/material/checkbox/checkbox-required-validator.ts","../../../../../../src/material/checkbox/checkbox-module.ts","../../../../../../src/material/checkbox/public-api.ts","../../../../../../src/material/checkbox/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAgBA;;AACA,IAAa,4BAA4B,GACrC,IAAI,4DAAJ,CAA8C,8BAA9C,EAA8E;AAC5E,YAAU,EAAE,MADgE;AAE5E,SAAO,EAAE;AAFmE,CAA9E,CADJ;;;AAOA,SAAgB,oCAAhB,GAAoD;AAClD,SAAO;AACL,SAAK,EAAE,QADF;AAEL,eAAW,EAAE;AAFR,GAAP;AAID;;;;;;;;AAgBD,IAAa,yBAAyB,GAClC,IAAI,4DAAJ,CAA2C,2BAA3C,CADJ;AC7CA;;;;;;;AAsDA;;AACA,IAAI,YAAY,GAAG,CAAnB;;;;;;;AAOA,IAAa,mCAAmC,GAAQ;AACtD,SAAO,EAAE,gEAD6C;AAEtD,aAAW,EAAE,gEAAU,CAAC;AAAA,WAAM,WAAN;AAAA,GAAD,CAF+B;AAGtD,OAAK,EAAE;AAH+C,CAAxD;;;IAsBa,iB;;;;;;;IASP,e,GACJ,yBAAmB,WAAnB,EAA0C;AAAA;;AAAvB;AAA2B,C;;AAEhD,IAAM,qBAAqB,GAMnB,4EAAa,CAAC,yEAAU,CAAC,iFAAkB,CAAC,4EAAa,CAAC,eAAD,CAAd,CAAnB,CAAX,CANrB;;;;;;;;;;;IAqCa,W;;;;;AAkEX,uBAAY,UAAZ,EACoB,kBADpB,EAEoB,aAFpB,EAGoB,OAHpB,EAImC,QAJnC;;;;;;AAWwB,cAXxB,EAY8D,cAZ9D,EAcwB,QAdxB,EAc4D;AAAA;;AAAA;;AAC1D,8BAAM,UAAN;AAdkB;AACA;AACA;AAQI;AACsC;AAEtC;;;;;;AAxEH,sBAAoB,EAApB;;;;;AAKK,2BAAgC,IAAhC;AAKlB,6CAAoC,EAAE,YAAtC;;;AAGC,eAAa,MAAK,SAAlB;;;AAYA,0BAAoC,OAApC;;;AAGA,iBAAsB,IAAtB;;;AAGU,mBACf,IAAI,0DAAJ,EADe;;;AAIA,gCAA6C,IAAI,0DAAJ,EAA7C;;;;;;AAenB,uBAAwB,aAAQ,CAAhC;;AAEQ,mCAAiC,EAAjC;AAEA,+BAAkB;AAAA;AAAlB;;AAEA,0CAAsD,aAAQ,CAA9D;;AAkEA,qBAAoB,KAApB;AAgBA,sBAAqB,KAArB;AA0BA,2BAA0B,KAA1B;AA1FN,UAAK,QAAL,GAAgB,MAAK,QAAL,IAAiB,EAAjC;;AAEA,QAAI,MAAK,QAAL,CAAc,KAAlB,EAAyB;AACvB,YAAK,KAAL,GAAa,MAAK,YAAL,GAAoB,MAAK,QAAL,CAAc,KAA/C;AACD;;AAED,UAAK,QAAL,GAAgB,QAAQ,CAAC,QAAD,CAAR,IAAsB,CAAtC,CAR0D,C;;AAW1D,UAAK,YAAL,GAAoB,MAAK,YAAL,IAAqB,MAAK,QAAL,CAAc,WAAvD;AAX0D;AAY3D;;;;;;SApED,eAAW;AAAa,uBAAU,KAAK,EAAL,IAAW,KAAK,SAA1B;AAA8C;;;;;SAGtE,eACY;AAAc,aAAO,KAAK,SAAZ;AAAwB,K;SAClD,aAAa,KAAb,EAA2B;AAAI,WAAK,SAAL,GAAiB,mFAAqB,CAAC,KAAD,CAAtC;AAAgD;;;WAiE/E,2BAAe;AAAA;;AACb,WAAK,aAAL,CAAmB,OAAnB,CAA2B,KAAK,WAAhC,EAA6C,IAA7C,EAAmD,SAAnD,CAA6D,qBAAW;AACtE,YAAI,CAAC,WAAL,EAAkB;;;;;;AAMhB,iBAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB;AACrB,kBAAI,CAAC,UAAL;;AACA,kBAAI,CAAC,kBAAL,CAAwB,YAAxB;AACD,WAHD;AAID;AACF,OAZD;;AAcA,WAAK,kBAAL,CAAwB,KAAK,cAA7B;AACD,K;;;;WAGD,8BAAkB,CAAK;;;WAEvB,uBAAW;AACT,WAAK,aAAL,CAAmB,cAAnB,CAAkC,KAAK,WAAvC;AACD;;;;;;;SAKD,eACW;AAAc,aAAO,KAAK,QAAZ;AAAuB,K;SAChD,aAAY,KAAZ,EAA0B;AACxB,UAAI,KAAK,IAAI,KAAK,OAAlB,EAA2B;AACzB,aAAK,QAAL,GAAgB,KAAhB;;AACA,aAAK,kBAAL,CAAwB,YAAxB;AACD;AACF;;;;;;;;SAOD,eACY;AAAK,aAAO,KAAK,SAAZ;AAAwB,K;SACzC,aAAa,KAAb,EAAuB;AACrB,UAAM,QAAQ,GAAG,mFAAqB,CAAC,KAAD,CAAtC;;AAEA,UAAI,QAAQ,KAAK,KAAK,QAAtB,EAAgC;AAC9B,aAAK,SAAL,GAAiB,QAAjB;;AACA,aAAK,kBAAL,CAAwB,YAAxB;AACD;AACF;;;;;;;;;;SASD,eACiB;AAAc,aAAO,KAAK,cAAZ;AAA6B,K;SAC5D,aAAkB,KAAlB,EAAgC;AAC9B,UAAM,OAAO,GAAG,KAAK,IAAI,KAAK,cAA9B;AACA,WAAK,cAAL,GAAsB,mFAAqB,CAAC,KAAD,CAA3C;;AAEA,UAAI,OAAJ,EAAa;AACX,YAAI,KAAK,cAAT,EAAyB;AACvB,eAAK,qBAAL,CAA0B;AAAA;AAA1B;AACD,SAFD,MAEO;AACL,eAAK,qBAAL,CACE,KAAK,OAAL,GAAY;AAAA;AAAZ,YAAY;AAAA;AADd;AAED;;AACD,aAAK,mBAAL,CAAyB,IAAzB,CAA8B,KAAK,cAAnC;AACD;;AAED,WAAK,kBAAL,CAAwB,KAAK,cAA7B;AACD;;;WAGD,6BAAiB;AACf,aAAO,KAAK,aAAL,IAAsB,KAAK,QAAlC;AACD;;;;;WAGD,8BAAkB;;;;;;AAMhB,WAAK,kBAAL,CAAwB,aAAxB;AACD,K;;;;WAGD,oBAAW,KAAX,EAAqB;AACnB,WAAK,OAAL,GAAe,CAAC,CAAC,KAAjB;AACD,K;;;;WAGD,0BAAiB,EAAjB,EAAyC;AACvC,WAAK,6BAAL,GAAqC,EAArC;AACD,K;;;;WAGD,2BAAkB,EAAlB,EAAyB;AACvB,WAAK,UAAL,GAAkB,EAAlB;AACD,K;;;;WAGD,0BAAiB,UAAjB,EAAoC;AAClC,WAAK,QAAL,GAAgB,UAAhB;AACD;;;WAED,2BAAe;AACb,UAAI,KAAK,OAAT,EAAkB;AAChB,eAAO,MAAP;AACD;;AAED,aAAO,KAAK,aAAL,GAAqB,OAArB,GAA+B,OAAtC;AACD;;;WAEO,+BAAsB,QAAtB,EAAoD;AAC1D,UAAI,QAAQ,GAAG,KAAK,kBAApB;AACA,UAAI,OAAO,GAAgB,KAAK,WAAL,CAAiB,aAA5C;;AAEA,UAAI,QAAQ,KAAK,QAAjB,EAA2B;AACzB;AACD;;AACD,UAAI,KAAK,sBAAL,CAA4B,MAA5B,GAAqC,CAAzC,EAA4C;AAC1C,eAAO,CAAC,SAAR,CAAkB,MAAlB,CAAyB,KAAK,sBAA9B;AACD;;AAED,WAAK,sBAAL,GAA8B,KAAK,yCAAL,CAC1B,QAD0B,EAChB,QADgB,CAA9B;AAEA,WAAK,kBAAL,GAA0B,QAA1B;;AAEA,UAAI,KAAK,sBAAL,CAA4B,MAA5B,GAAqC,CAAzC,EAA4C;AAC1C,eAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,KAAK,sBAA3B,EAD0C,C;;AAI1C,YAAM,cAAc,GAAG,KAAK,sBAA5B;;AAEA,aAAK,OAAL,CAAa,iBAAb,CAA+B;AAC7B,oBAAU,CAAC;AACT,mBAAO,CAAC,SAAR,CAAkB,MAAlB,CAAyB,cAAzB;AACD,WAFS,EAEP,IAFO,CAAV;AAGD,SAJD;AAKD;AACF;;;WAEO,4BAAgB;AACtB,UAAM,KAAK,GAAG,IAAI,iBAAJ,EAAd;AACA,WAAK,CAAC,MAAN,GAAe,IAAf;AACA,WAAK,CAAC,OAAN,GAAgB,KAAK,OAArB;;AAEA,WAAK,6BAAL,CAAmC,KAAK,OAAxC;;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACD;;;;;WAGD,kBAAM;AACJ,WAAK,OAAL,GAAe,CAAC,KAAK,OAArB;AACD;;;;;;;;;;;WASD,uBAAc,KAAd,EAA0B;AAAA;;;;;;;;;AAQxB,WAAK,CAAC,eAAN,GARwB,C;;AAWxB,UAAI,CAAC,KAAK,QAAN,IAAkB,KAAK,YAAL,KAAsB,MAA5C,EAAoD;;AAElD,YAAI,KAAK,aAAL,IAAsB,KAAK,YAAL,KAAsB,OAAhD,EAAyD;AAEvD,iBAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB;AACrB,kBAAI,CAAC,cAAL,GAAsB,KAAtB;;AACA,kBAAI,CAAC,mBAAL,CAAyB,IAAzB,CAA8B,MAAI,CAAC,cAAnC;AACD,WAHD;AAID;;AAED,aAAK,MAAL;;AACA,aAAK,qBAAL,CACI,KAAK,QAAL,GAAa;AAAA;AAAb,UAAa;AAAA;AADjB,UAXkD,C;;;;;AAiBlD,aAAK,gBAAL;AACD,OAlBD,MAkBO,IAAI,CAAC,KAAK,QAAN,IAAkB,KAAK,YAAL,KAAsB,MAA5C,EAAoD;;;AAGzD,aAAK,aAAL,CAAmB,aAAnB,CAAiC,OAAjC,GAA2C,KAAK,OAAhD;AACA,aAAK,aAAL,CAAmB,aAAnB,CAAiC,aAAjC,GAAiD,KAAK,aAAtD;AACD;AACF;;;;;WAGD,iBAA8D;AAAA,UAAxD,MAAwD,uEAAlC,UAAkC;AAAA,UAAtB,OAAsB;;AAC5D,WAAK,aAAL,CAAmB,QAAnB,CAA4B,KAAK,aAAjC,EAAgD,MAAhD,EAAwD,OAAxD;AACD;;;WAED,6BAAoB,KAApB,EAAgC;;;;AAI9B,WAAK,CAAC,eAAN;AACD;;;WAEO,mDACJ,QADI,EAC4B,QAD5B,EAC0D;;AAEhE,UAAI,KAAK,cAAL,KAAwB,gBAA5B,EAA8C;AAC5C,eAAO,EAAP;AACD;;AAED,UAAI,UAAU,GAAW,EAAzB;;AAEA,cAAQ,QAAR;AACE;AAAA;AAAA;;;AAGE,cAAI,QAAQ;AAAA;AAAZ,YAA+C;AAC7C,wBAAU,GAAG,mBAAb;AACD,aAFD,MAEO,IAAI,QAAQ;AAAA;AAAZ,YAAoD;AACzD,wBAAU,GAAG,yBAAb;AACD,aAFM,MAEA;AACL,mBAAO,EAAP;AACD;;AACD;;AACF;AAAA;AAAA;AACE,oBAAU,GAAG,QAAQ;AAAA;AAAR,YACT,mBADS,GACa,yBAD1B;AAEA;;AACF;AAAA;AAAA;AACE,oBAAU,GAAG,QAAQ;AAAA;AAAR,YACT,mBADS,GACa,uBAD1B;AAEA;;AACF;AAAA;AAAA;AACE,oBAAU,GAAG,QAAQ;AAAA;AAAR,YACT,uBADS,GACiB,yBAD9B;AAEA;AAvBJ;;AA0BA,yCAA4B,UAA5B;AACD;;;;;;;;;;;;WAUO,4BAAmB,KAAnB,EAAiC;AACvC,UAAM,cAAc,GAAG,KAAK,aAA5B;;AAEA,UAAI,cAAJ,EAAoB;AAClB,sBAAc,CAAC,aAAf,CAA6B,aAA7B,GAA6C,KAA7C;AACD;AACF;;;;EA/W8B,qB;;;QApBhC,uD;AAAS,SAAC;AACT,YAAQ,EAAE,cADD;AAET,smEAFS;AAIT,YAAQ,EAAE,aAJD;AAKT,QAAI,EAAE;AACJ,eAAS,cADL;AAEJ,cAAQ,IAFJ;AAGJ,yBAAmB,MAHf;AAIJ,4CAAsC,eAJlC;AAKJ,sCAAgC,SAL5B;AAMJ,uCAAiC,UAN7B;AAOJ,2CAAqC,2BAPjC;AAQJ;AARI,KALG;AAeT,aAAS,EAAE,CAAC,mCAAD,CAfF;AAgBT,UAAM,EAAE,CAAC,eAAD,EAAkB,OAAlB,EAA2B,UAA3B,CAhBC;AAiBT,iBAAa,EAAE,+DAAiB,CAAC,IAjBxB;AAkBT,mBAAe,EAAE,qEAAuB,CAAC,MAlBhC;;AAAA,GAAD;;;;;UAjGR,wDAAU;;UAFV,+DAAiB;;UANM,8DAAY;;UAanC,oDAAM;;;;YAsLO,uD;AAAS,aAAC,UAAD;;;;;YAMT,sDAAQ;OAAA;AAAA,YAAI,oDAAJ;AAAU,aAAC,yBAAD;AAAV,K;;;;YAER,sDAAQ;OAAA;AAAA,YAAI,oDAAJ;AAAU,aAAC,0FAAD;AAAV,K;;;;YACR,sDAAQ;OAAA;AAAA,YAAI,oDAAJ;AAAU,aAAC,4BAAD;AAAV,K;;;;;;UAvEpB,mD;AAAK,WAAC,YAAD;;;UAKL,mD;AAAK,WAAC,iBAAD;;;UAGL,mD;AAAK,WAAC,kBAAD;;;UAKL,mDAAK;;;UAML,mDAAK;;;UAML,mDAAK;;;UAGL,mDAAK;;;UAGL,oDAAM;;;UAIN,oDAAM;;;UAGN,mDAAK;;;UAGL,uD;AAAS,WAAC,OAAD;;;UAGT,uD;AAAS,WAAC,gEAAD;;;UAsET,mDAAK;;;UAcL,mDAAK;;;UAkBL,mDAAK;;;AC/RR;;;;;;;;AAQA,IAUa,+BAA+B,GAAa;AACvD,SAAO,EAAE,4DAD8C;AAEvD,aAAW,EAAE,gEAAU,CAAC;AAAA,WAAM,4BAAN;AAAA,GAAD,CAFgC;AAGvD,OAAK,EAAE;AAHgD,CAVzD;;;;;;;IA0Ba,4B;;;;;;;;;;;;EAAqC,wE;;;QALjD,uD;AAAS,SAAC;AACT,YAAQ,+HADC;AAGT,aAAS,EAAE,CAAC,+BAAD;AAHF,GAAD;;AC7BV;;;;;;;;AAcA;;IAKa,mC;;;;;QAJZ,sD;AAAQ,SAAC;AACR,WAAO,EAAE,CAAC,4BAAD,CADD;AAER,gBAAY,EAAE,CAAC,4BAAD;AAFN,GAAD;;;IAeI,iB;;;;;QARZ,sD;AAAQ,SAAC;AACR,WAAO,EAAE,CACP,sEADO,EACU,sEADV,EAC2B,uEAD3B,EAEP,mCAFO,CADD;AAKR,WAAO,EAAE,CAAC,WAAD,EAAc,sEAAd,EAA+B,mCAA/B,CALD;AAMR,gBAAY,EAAE,CAAC,WAAD;AANN,GAAD;;ACtBT;;;;;;;;ACAA","file":"default~paginas-aerc-solicitudes-admin-aerc-admin-formularios-admin-formularios-module-ngfactory~pag~2335b4fb.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n/** Default `mat-checkbox` options that can be overridden. */\nexport interface MatCheckboxDefaultOptions {\n  color?: ThemePalette;\n  clickAction?: MatCheckboxClickAction;\n}\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS =\n    new InjectionToken<MatCheckboxDefaultOptions>('mat-checkbox-default-options', {\n      providedIn: 'root',\n      factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate',\n  };\n}\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @deprecated Injection token will be removed, use `MAT_CHECKBOX_DEFAULT_OPTIONS` instead.\n * @breaking-change 10.0.0\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\nimport {\n  AfterViewChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_CHECKBOX_CLICK_ACTION,\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MatCheckboxClickAction,\n  MatCheckboxDefaultOptions\n} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport const enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated `_clickAction` parameter to be removed, use\n               * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n               * @breaking-change 10.0.0\n               */\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS)\n                  private _options?: MatCheckboxDefaultOptions) {\n    super(elementRef);\n    this._options = this._options || {};\n\n    if (this._options.color) {\n      this.color = this.defaultColor = this._options.color;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // TODO: Remove this after the `_clickAction` parameter is removed as an injection parameter.\n    this._clickAction = this._clickAction || this._options.clickAction;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = coerceBooleanProperty(value);\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    if (this.checked) {\n      return 'true';\n    }\n\n    return this.indeterminate ? 'mixed' : 'false';\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_indeterminate: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './checkbox';\nexport * from './checkbox-config';\nexport * from './checkbox-module';\nexport * from './checkbox-required-validator';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"sourceRoot":"webpack:///"}