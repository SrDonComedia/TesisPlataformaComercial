{"version":3,"sources":["../../../../../../src/cdk/drag-drop/drag-styling.ts","../../../../../../src/cdk/drag-drop/transition-duration.ts","../../../../../../src/cdk/drag-drop/client-rect.ts","../../../../../../src/cdk/drag-drop/parent-position-tracker.ts","../../../../../../src/cdk/drag-drop/clone-node.ts","../../../../../../src/cdk/drag-drop/drag-ref.ts","../../../../../../src/cdk/drag-drop/drag-utils.ts","../../../../../../src/cdk/drag-drop/drop-list-ref.ts","../../../../../../src/cdk/drag-drop/drag-drop-registry.ts","../../../../../../src/cdk/drag-drop/drag-drop.ts","../../../../../../src/cdk/drag-drop/drag-parent.ts","../../../../../../src/cdk/drag-drop/drag-events.ts","../../../../../../src/cdk/drag-drop/directives/drop-list-group.ts","../../../../../../src/cdk/drag-drop/directives/config.ts","../../../../../../src/cdk/drag-drop/directives/drop-list.ts","../../../../../../src/cdk/drag-drop/directives/drag-handle.ts","../../../../../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../../../../../src/cdk/drag-drop/directives/drag-preview.ts","../../../../../../src/cdk/drag-drop/directives/drag.ts","../../../../../../src/cdk/drag-drop/drag-drop-module.ts","../../../../../../src/cdk/drag-drop/public-api.ts","../../../../../../src/cdk/drag-drop/index.ts"],"names":["clamp"],"mappings":"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","file":"default~paginas-aerc-solicitudes-admin-aerc-admin-formularios-admin-formularios-module-ngfactory~pag~c0359467.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\nexport interface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n  msScrollSnapType: string;\n  scrollSnapType: string;\n  msUserSelect: string;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key]!;\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @docs-private\n */\nexport function toggleVisibility(element: HTMLElement, enable: boolean) {\n  const styles = element.style;\n  styles.position = enable ? '' : 'fixed';\n  styles.top = styles.opacity = enable ? '' : '0';\n  styles.left = enable ? '' : '-999em';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nexport function getMutableClientRect(element: Element): ClientRect {\n  const clientRect = element.getBoundingClientRect();\n\n  // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `ClientRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n  return {\n    top: clientRect.top,\n    right: clientRect.right,\n    bottom: clientRect.bottom,\n    left: clientRect.left,\n    width: clientRect.width,\n    height: clientRect.height\n  };\n}\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nexport function isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nexport function adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nexport function isPointerNearClientRect(rect: ClientRect,\n                                        threshold: number,\n                                        pointerX: number,\n                                        pointerY: number): boolean {\n  const {top, right, bottom, left, width, height} = rect;\n  const xThreshold = width * threshold;\n  const yThreshold = height * threshold;\n\n  return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n         pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {getMutableClientRect, adjustClientRect} from './client-rect';\n\n/** Object holding the scroll position of something. */\ninterface ScrollPosition {\n  top: number;\n  left: number;\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nexport class ParentPositionTracker {\n  /** Cached positions of the scrollable parent elements. */\n  readonly positions = new Map<Document|HTMLElement, {\n    scrollPosition: ScrollPosition,\n    clientRect?: ClientRect\n  }>();\n\n  constructor(private _document: Document, private _viewportRuler: ViewportRuler) {}\n\n  /** Clears the cached positions. */\n  clear() {\n    this.positions.clear();\n  }\n\n  /** Caches the positions. Should be called at the beginning of a drag sequence. */\n  cache(elements: HTMLElement[] | ReadonlyArray<HTMLElement>) {\n    this.clear();\n    this.positions.set(this._document, {\n      scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n    });\n\n    elements.forEach(element => {\n      this.positions.set(element, {\n        scrollPosition: {top: element.scrollTop, left: element.scrollLeft},\n        clientRect: getMutableClientRect(element)\n      });\n    });\n  }\n\n  /** Handles scrolling while a drag is taking place. */\n  handleScroll(event: Event): ScrollPosition | null {\n    const target = event.target as HTMLElement | Document;\n    const cachedPosition = this.positions.get(target);\n\n    if (!cachedPosition) {\n      return null;\n    }\n\n    // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n    // parent is the `document`, we use the `documentElement`, because IE doesn't support\n    // `contains` on the `document`.\n    const scrolledParentNode = target === this._document ? target.documentElement : target;\n    const scrollPosition = cachedPosition.scrollPosition;\n    let newTop: number;\n    let newLeft: number;\n\n    if (target === this._document) {\n      const viewportScrollPosition = this._viewportRuler!.getViewportScrollPosition();\n      newTop = viewportScrollPosition.top;\n      newLeft = viewportScrollPosition.left;\n    } else {\n      newTop = (target as HTMLElement).scrollTop;\n      newLeft = (target as HTMLElement).scrollLeft;\n    }\n\n    const topDifference = scrollPosition.top - newTop;\n    const leftDifference = scrollPosition.left - newLeft;\n\n    // Go through and update the cached positions of the scroll\n    // parents that are inside the element that was scrolled.\n    this.positions.forEach((position, node) => {\n      if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n        adjustClientRect(position.clientRect, topDifference, leftDifference);\n      }\n    });\n\n    scrollPosition.top = newTop;\n    scrollPosition.left = newLeft;\n\n    return {top: topDifference, left: leftDifference};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Creates a deep clone of an element. */\nexport function deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  const descendantsWithId = clone.querySelectorAll('[id]');\n  const nodeName = node.nodeName.toLowerCase();\n\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  if (nodeName === 'canvas') {\n    transferCanvasData(node as HTMLCanvasElement, clone as HTMLCanvasElement);\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n    transferInputData(node as HTMLInputElement, clone as HTMLInputElement);\n  }\n\n  transferData('canvas', node, clone, transferCanvasData);\n  transferData('input, textarea, select', node, clone, transferInputData);\n  return clone;\n}\n\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData<T extends Element>(selector: string, node: HTMLElement, clone: HTMLElement,\n                                         callback: (source: T, clone: T) => void) {\n  const descendantElements = node.querySelectorAll<T>(selector);\n\n  if (descendantElements.length) {\n    const cloneElements = clone.querySelectorAll<T>(selector);\n\n    for (let i = 0; i < descendantElements.length; i++) {\n      callback(descendantElements[i], cloneElements[i]);\n    }\n  }\n}\n\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source: Element & {value: string},\n                           clone: Element & {value: string; name: string; type: string}) {\n  // Browsers throw an error when assigning the value of a file input programmatically.\n  if (clone.type !== 'file') {\n    clone.value = source.value;\n  }\n\n  // Radio button `name` attributes must be unique for radio button groups\n  // otherwise original radio buttons can lose their checked state\n  // once the clone is inserted in the DOM.\n  if (clone.type === 'radio' && clone.name) {\n    clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n  }\n}\n\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source: HTMLCanvasElement, clone: HTMLCanvasElement) {\n  const context = clone.getContext('2d');\n\n  if (context) {\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n    // We can't do much about it so just ignore the error.\n    try {\n      context.drawImage(source, 0, 0);\n    } catch {}\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Direction} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable} from 'rxjs';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions, toggleVisibility} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\nimport {getMutableClientRect, adjustClientRect} from './client-rect';\nimport {ParentPositionTracker} from './parent-position-tracker';\nimport {deepCloneNode} from './clone-node';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n\n  /** `z-index` for the absolutely-positioned elements that are created by the drag item. */\n  zIndex?: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/** Template that can be used to create a drag preview element. */\ninterface DragPreviewTemplate<T = any> extends DragHelperTemplate<T> {\n  matchSize?: boolean;\n}\n\n/** Point on the page or within an element. */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Anchor node used to save the place in the DOM where the element was\n   * picked up so that it can be restored at the end of the drag sequence.\n   */\n  private _anchor: Comment;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Index at which the item started in its initial container. */\n  private _initialIndex: number;\n\n  /** Cached positions of scrollable parent elements. */\n  private _parentPositions: ParentPositionTracker;\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    distance: Point;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /** Position of the pointer at the last pointer event. */\n  private _lastKnownPointerPosition: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Nearest ancestor SVG, relative to which coordinates are calculated if dragging SVGElement\n   */\n  private _ownerSVGElement: SVGSVGElement | null;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /** Subscription to the viewport being scrolled. */\n  private _scrollSubscription = Subscription.EMPTY;\n\n  /** Subscription to the viewport being resized. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Time at which the last dragging sequence was started. */\n  private _dragStartTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragPreviewTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  dragStartDelay: number | {touch: number, mouse: number} = 0;\n\n  /** Class to be added to the preview element. */\n  previewClass: string|string[]|undefined;\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  released = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef, distance: Point}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef, currentIndex: number}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    distance: Point;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    distance: Point;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = this._moveEvents;\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page and should return a point describing where the item should\n   * be rendered.\n   */\n  constrainPosition?: (point: Point, dragRef: DragRef) => Point;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\n\n    this.withRootElement(element);\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /**\n   * Gets the currently-visible element that represents the drag item.\n   * While dragging this is the placeholder, otherwise it's the root element.\n   */\n  getVisibleElement(): HTMLElement {\n    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragPreviewTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      });\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n      this._ownerSVGElement = this._rootElement.ownerSVGElement;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    this._resizeSubscription.unsubscribe();\n    if (boundaryElement) {\n      this._resizeSubscription = this._viewportRuler\n        .change(10)\n        .subscribe(() => this._containInsideBoundaryOnResize());\n    }\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeNode(this._rootElement);\n    }\n\n    removeNode(this._anchor);\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._resizeSubscription.unsubscribe();\n    this._parentPositions.clear();\n    this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n        this._previewTemplate = this._anchor = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    this._disabledHandles.delete(handle);\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /**\n   * Gets the current position in pixels the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): Readonly<Point> {\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n    return {x: position.x, y: position.y};\n  }\n\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n  setFreeDragPosition(value: Point): this {\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n\n    return this;\n  }\n\n  /** Updates the item's sort order based on the last-known pointer position. */\n  _sortFromLastPointerPosition() {\n    const position = this._lastKnownPointerPosition;\n\n    if (position && this._dropContainer) {\n      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n    }\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n    this._scrollSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeNode(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeNode(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const target = event.target;\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    // Prevent the default action as early as possible in order to block\n    // native actions like dragging the selected text or images with the mouse.\n    event.preventDefault();\n    const pointerPosition = this._getPointerPositionOnPage(event);\n\n    if (!this._hasStartedDragging) {\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (isOverThreshold) {\n        const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n        const container = this._dropContainer;\n\n        if (!isDelayElapsed) {\n          this._endDragSequence(event);\n          return;\n        }\n\n        // Prevent other drag sequences from starting while something in the container is still\n        // being dragged. This can happen while we're waiting for the drop animation to finish\n        // and can cause errors, because some elements might still be moving around.\n        if (!container || (!container.isDragging() && !container.isReceiving())) {\n          this._hasStartedDragging = true;\n          this._ngZone.run(() => this._startDragSequence(event));\n        }\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n    this._hasMoved = true;\n    this._lastKnownPointerPosition = pointerPosition;\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n\n      this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEvents.observers.length) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          distance: this._getDragDistance(constrainedPointerPosition),\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    this._endDragSequence(event);\n  }\n\n  /**\n   * Clears subscriptions and stops the dragging sequence.\n   * @param event Browser event object that ended the sequence.\n   */\n  private _endDragSequence(event: MouseEvent | TouchEvent) {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n    this._toggleNativeDragInteractions();\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({source: this});\n\n    if (this._dropContainer) {\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\n      this._dropContainer._stopScrolling();\n      this._animatePreviewToPlaceholder().then(() => {\n        this._cleanupDragArtifacts(event);\n        this._cleanupCachedDimensions();\n        this._dragDropRegistry.stopDragging(this);\n      });\n    } else {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => {\n        this.ended.next({\n          source: this,\n          distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n        });\n      });\n      this._cleanupCachedDimensions();\n      this._dragDropRegistry.stopDragging(this);\n    }\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    this._toggleNativeDragInteractions();\n\n    const dropContainer = this._dropContainer;\n\n    if (dropContainer) {\n      const element = this._rootElement;\n      const parent = element.parentNode!;\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n      const anchor = this._anchor = this._anchor || this._document.createComment('');\n\n      // Insert an anchor node so that we can restore the element's position in the DOM.\n      parent.insertBefore(anchor, element);\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      toggleVisibility(element, false);\n      this._document.body.appendChild(parent.replaceChild(placeholder, element));\n      getPreviewInsertionPoint(this._document).appendChild(preview);\n      this.started.next({source: this}); // Emit before notifying the container.\n      dropContainer.start();\n      this._initialContainer = dropContainer;\n      this._initialIndex = dropContainer.getItemIndex(this);\n    } else {\n      this.started.next({source: this});\n      this._initialContainer = this._initialIndex = undefined!;\n    }\n\n    // Important to run after we've called `start` on the parent container\n    // so that it has had time to resolve its scrollable parents.\n    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n\n    // Avoid multiple subscriptions and memory leaks when multi touch\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n    this._removeSubscriptions();\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n      this._updateOnScroll(scrollEvent);\n    });\n\n    if (this._boundaryElement) {\n      this._boundaryRect = getMutableClientRect(this._boundaryElement);\n    }\n\n    // If we have a custom preview we can't know ahead of time how large it'll be so we position\n    // it next to the cursor. The exception is when the consumer has opted into making the preview\n    // the same size as the root element, in which case we do know the size.\n    const previewTemplate = this._previewTemplate;\n    this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n      !previewTemplate.matchSize ? {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n        this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    toggleVisibility(this._rootElement, true);\n    this._anchor.parentNode!.replaceChild(this._rootElement, this._anchor);\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n      const isPointerOverContainer = container._isOverContainer(\n        pointerPosition.x, pointerPosition.y);\n\n      this.ended.next({source: this, distance});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialIndex,\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer,\n        distance\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance,\n          this._initialIndex);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point, {x: rawX, y: rawY}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left its\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n            // If we're re-entering the initial container and sorting is disabled,\n            // put item the into its starting index to begin with.\n            newContainer.sortingDisabled ? this._initialIndex : undefined);\n        this.entered.next({\n          item: this,\n          container: newContainer!,\n          currentIndex: newContainer!.getItemIndex(this)\n        });\n      });\n    }\n\n    this._dropContainer!._startScrollingIfNecessary(rawX, rawY);\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewClass = this.previewClass;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate && previewConfig) {\n      // Measure the element before we've inserted the preview\n      // since the insertion could throw off the measurement.\n      const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n      const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate,\n                                                                     previewConfig.context);\n      viewRef.detectChanges();\n      preview = getRootNode(viewRef, this._document);\n      this._previewRef = viewRef;\n      if (previewConfig.matchSize) {\n        matchElementSize(preview, rootRect!);\n      } else {\n        preview.style.transform =\n            getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n      }\n    } else {\n      const element = this._rootElement;\n      preview = deepCloneNode(element);\n      matchElementSize(preview, element.getBoundingClientRect());\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      // We have to reset the margin, because it can throw off positioning relative to the viewport.\n      margin: '0',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: `${this._config.zIndex || 1000}`\n    });\n\n    toggleNativeDragInteractions(preview, false);\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    if (previewClass) {\n      if (Array.isArray(previewClass)) {\n        previewClass.forEach(className => preview.classList.add(className));\n      } else {\n        preview.classList.add(previewClass);\n      }\n    }\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context\n      );\n      this._placeholderRef.detectChanges();\n      placeholder = getRootNode(this._placeholderRef, this._document);\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const scrollPosition = this._getViewportScrollPosition();\n    const x = point.pageX - referenceRect.left - scrollPosition.left;\n    const y = point.pageY - referenceRect.top - scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const scrollPosition = this._getViewportScrollPosition();\n    const point = isTouchEvent(event) ?\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n        // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n        // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n        // throwing an error. The value returned here will be incorrect, but since this only\n        // breaks inside a developer tool and the value is only used for secondary information,\n        // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n        (event.touches[0] || event.changedTouches[0] || {pageX: 0, pageY: 0}) : event;\n\n    const x = point.pageX - scrollPosition.left;\n    const y = point.pageY - scrollPosition.top;\n\n    // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n    // coordinate system\n    if (this._ownerSVGElement) {\n      const svgMatrix = this._ownerSVGElement.getScreenCTM();\n      if (svgMatrix) {\n        const svgPoint = this._ownerSVGElement.createSVGPoint();\n        svgPoint.x = x;\n        svgPoint.y = y;\n        return svgPoint.matrixTransform(svgMatrix.inverse());\n      }\n    }\n\n    return {x, y};\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(point: Point): Point {\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n    let {x, y} = this.constrainPosition ? this.constrainPosition(point, this) : point;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      x = clamp(x, minX, maxX);\n      y = clamp(y, minY, maxY);\n    }\n\n    return {x, y};\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n  /**\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  private _applyRootElementTransform(x: number, y: number) {\n    const transform = getTransform(x, y);\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n    this._rootElement.style.transform = this._initialTransform ?\n      transform + ' ' + this._initialTransform  : transform;\n  }\n\n  /**\n   * Gets the distance that the user has dragged during the current drag sequence.\n   * @param currentPosition Current position of the user's pointer.\n   */\n  private _getDragDistance(currentPosition: Point): Point {\n    const pickupPosition = this._pickupPositionOnPage;\n\n    if (pickupPosition) {\n      return {x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y};\n    }\n\n    return {x: 0, y: 0};\n  }\n\n  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n  private _cleanupCachedDimensions() {\n    this._boundaryRect = this._previewRect = undefined;\n    this._parentPositions.clear();\n  }\n\n  /**\n   * Checks whether the element is still inside its boundary after the viewport has been resized.\n   * If not, the position is adjusted so that the element fits again.\n   */\n  private _containInsideBoundaryOnResize() {\n    let {x, y} = this._passiveTransform;\n\n    if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n      return;\n    }\n\n    const boundaryRect = this._boundaryElement.getBoundingClientRect();\n    const elementRect = this._rootElement.getBoundingClientRect();\n\n    // It's possible that the element got hidden away after dragging (e.g. by switching to a\n    // different tab). Don't do anything in this case so we don't clear the user's position.\n    if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n        (elementRect.width === 0 && elementRect.height === 0)) {\n      return;\n    }\n\n    const leftOverflow = boundaryRect.left - elementRect.left;\n    const rightOverflow = elementRect.right - boundaryRect.right;\n    const topOverflow = boundaryRect.top - elementRect.top;\n    const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n\n    // If the element has become wider than the boundary, we can't\n    // do much to make it fit so we just anchor it to the left.\n    if (boundaryRect.width > elementRect.width) {\n      if (leftOverflow > 0) {\n        x += leftOverflow;\n      }\n\n      if (rightOverflow > 0) {\n        x -= rightOverflow;\n      }\n    } else {\n      x = 0;\n    }\n\n    // If the element has become taller than the boundary, we can't\n    // do much to make it fit so we just anchor it to the top.\n    if (boundaryRect.height > elementRect.height) {\n      if (topOverflow > 0) {\n        y += topOverflow;\n      }\n\n      if (bottomOverflow > 0) {\n        y -= bottomOverflow;\n      }\n    } else {\n      y = 0;\n    }\n\n    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n      this.setFreeDragPosition({y, x});\n    }\n  }\n\n  /** Gets the drag start delay, based on the event type. */\n  private _getDragStartDelay(event: MouseEvent | TouchEvent): number {\n    const value = this.dragStartDelay;\n\n    if (typeof value === 'number') {\n      return value;\n    } else if (isTouchEvent(event)) {\n      return value.touch;\n    }\n\n    return value ? value.mouse : 0;\n  }\n\n  /** Updates the internal state of the draggable element when scrolling has occurred. */\n  private _updateOnScroll(event: Event) {\n    const scrollDifference = this._parentPositions.handleScroll(event);\n\n    if (scrollDifference) {\n      const target = event.target as Node;\n\n      // ClientRect dimensions are based on the scroll position of the page and its parent node so\n      // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n      // the `document` specifically since IE doesn't support `contains` on it.\n      if (this._boundaryRect && (target === this._document ||\n          (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n        adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n      }\n\n      this._pickupPositionOnPage.x += scrollDifference.left;\n      this._pickupPositionOnPage.y += scrollDifference.top;\n\n      // If we're in free drag mode, we have to update the active transform, because\n      // it isn't relative to the viewport like the preview inside a drop list.\n      if (!this._dropContainer) {\n        this._activeTransform.x -= scrollDifference.left;\n        this._activeTransform.y -= scrollDifference.top;\n        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n      }\n    }\n  }\n\n  /** Gets the scroll position of the viewport. */\n  private _getViewportScrollPosition() {\n    const cachedPosition = this._parentPositions.positions.get(this._document);\n    return cachedPosition ? cachedPosition.scrollPosition :\n        this._viewportRuler.getViewportScrollPosition();\n  }\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node: Node | null) {\n  if (node && node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef: any): HTMLElement {\n  // We can't use the body if the user is in fullscreen mode,\n  // because the preview will render under the fullscreen element.\n  // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n  return documentRef.fullscreenElement ||\n         documentRef.webkitFullscreenElement ||\n         documentRef.mozFullScreenElement ||\n         documentRef.msFullscreenElement ||\n         documentRef.body;\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef: EmbeddedViewRef<any>, _document: Document): HTMLElement {\n  const rootNodes: Node[] = viewRef.rootNodes;\n\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n    return rootNodes[0] as HTMLElement;\n  }\n\n  const wrapper = _document.createElement('div');\n  rootNodes.forEach(node => wrapper.appendChild(node));\n  return wrapper;\n}\n\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target: HTMLElement, sourceRect: ClientRect): void {\n  target.style.width = `${sourceRect.width}px`;\n  target.style.height = `${sourceRect.height}px`;\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {_getShadowRoot} from '@angular/cdk/platform';\nimport {Subject, Subscription, interval, animationFrameScheduler} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {moveItemInArray} from './drag-utils';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {DragRefInternal as DragRef, Point} from './drag-ref';\nimport {\n  isPointerNearClientRect,\n  adjustClientRect,\n  getMutableClientRect,\n  isInsideClientRect,\n} from './client-rect';\nimport {ParentPositionTracker} from './parent-position-tracker';\nimport {DragCSSStyleDeclaration} from './drag-styling';\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n */\nconst AUTO_SCROLL_STEP = 2;\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/** Vertical direction in which we can auto-scroll. */\nconst enum AutoScrollVerticalDirection {NONE, UP, DOWN}\n\n/** Horizontal direction in which we can auto-scroll. */\nconst enum AutoScrollHorizontalDirection {NONE, LEFT, RIGHT}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nexport class DropListRef<T = any> {\n  /** Element that the drop list is attached to. */\n  element: HTMLElement | ElementRef<HTMLElement>;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Whether sorting items within the list is disabled. */\n  sortingDisabled: boolean = false;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Whether auto-scrolling the view when the user\n   * moves their pointer close to the edges is disabled.\n   */\n  autoScrollDisabled: boolean = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef, currentIndex: number}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean,\n    distance: Point;\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition[] = [];\n\n  /** Keeps track of the positions of any parent scrollable elements. */\n  private _parentPositions: ParentPositionTracker;\n\n  /** Cached `ClientRect` of the drop list. */\n  private _clientRect: ClientRect;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n   * the pointer was moving in when the swap occured and whether the user's pointer continued to\n   * overlap with the swapped item after the swapping occurred.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0, overlaps: false};\n\n  /** Draggable items in the container. */\n  private _draggables: ReadonlyArray<DragRef>;\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: ReadonlyArray<DropListRef> = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  /** Layout direction of the drop list. */\n  private _direction: Direction = 'ltr';\n\n  /** Subscription to the window being scrolled. */\n  private _viewportScrollSubscription = Subscription.EMPTY;\n\n  /** Vertical direction in which the list is currently scrolling. */\n  private _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n\n  /** Horizontal direction in which the list is currently scrolling. */\n  private _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n  /** Node that is being auto-scrolled. */\n  private _scrollNode: HTMLElement | Window;\n\n  /** Used to signal to the current auto-scroll sequence when to stop. */\n  private _stopScrollTimers = new Subject<void>();\n\n  /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n  private _cachedShadowRoot: DocumentOrShadowRoot | null = null;\n\n  /** Reference to the document. */\n  private _document: Document;\n\n  /** Elements that can be scrolled while the user is dragging. */\n  private _scrollableElements: HTMLElement[];\n\n  /** Initial value for the element's `scroll-snap-type` style. */\n  private _initialScrollSnap: string;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler) {\n    this.element = coerceElement(element);\n    this._document = _document;\n    this.withScrollableParents([this.element]);\n    _dragDropRegistry.registerDropContainer(this);\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this._stopScrolling();\n    this._stopScrollTimers.complete();\n    this._viewportScrollSubscription.unsubscribe();\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._activeSiblings.clear();\n    this._scrollNode = null!;\n    this._parentPositions.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    const styles = coerceElement(this.element).style as DragCSSStyleDeclaration;\n    this.beforeStarted.next();\n    this._isDragging = true;\n\n    // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n    // scrolling. The browser seems to round the value based on the snapping points which means\n    // that we can't increment/decrement the scroll position.\n    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n    styles.scrollSnapType = styles.msScrollSnapType = 'none';\n    this._cacheItems();\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\n    this._viewportScrollSubscription.unsubscribe();\n    this._listenToScrollEvents();\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number, index?: number): void {\n    this.start();\n\n    // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n    let newIndex: number;\n\n    if (index == null) {\n      newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n\n      if (newIndex === -1) {\n        // We use the coordinates of where the item entered the drop\n        // zone to figure out at which index it should be inserted.\n        newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n      }\n    } else {\n      newIndex = index;\n    }\n\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference: DragRef | undefined = activeDraggables[newIndex];\n\n    // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    }\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n      const reference = activeDraggables[0].getRootElement();\n      reference.parentNode!.insertBefore(placeholder, reference);\n      activeDraggables.unshift(item);\n    } else {\n      coerceElement(this.element).appendChild(placeholder);\n      activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed and also parent rects.\n    this._cacheItemPositions();\n    this._cacheParentPositions();\n\n    this.entered.next({item, container: this, currentIndex: this.getItemIndex(item)});\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\n   * @param previousIndex Index of the item when dragging started.\n   *\n   * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean, distance: Point, previousIndex?: number): void {\n    this._reset();\n\n    // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n    if (previousIndex == null) {\n      previousIndex = previousContainer.getItemIndex(item);\n    }\n\n    this.dropped.next({item,\n      currentIndex,\n      previousIndex,\n      container: this,\n      previousContainer,\n      isPointerOverContainer,\n      distance\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    const previousItems = this._draggables;\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n\n    if (this.isDragging()) {\n      const draggedItems = previousItems.filter(item => item.isDragging());\n\n      // If all of the items being dragged were removed\n      // from the list, abort the current drag sequence.\n      if (draggedItems.every(item => items.indexOf(item) === -1)) {\n        this._reset();\n      } else {\n        this._cacheItems();\n      }\n    }\n\n    return this;\n  }\n\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Sets which parent elements are can be scrolled while the user is dragging.\n   * @param elements Elements that can be scrolled.\n   */\n  withScrollableParents(elements: HTMLElement[]): this {\n    const element = coerceElement(this.element);\n\n    // We always allow the current element to be scrollable\n    // so we need to ensure that it's in the array.\n    this._scrollableElements =\n        elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n    return this;\n  }\n\n  /** Gets the scrollable parents that are registered with this drop container. */\n  getScrollableParents(): ReadonlyArray<HTMLElement> {\n    return this._scrollableElements;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n        this._itemPositions.slice().reverse() : this._itemPositions;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled ||\n        !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n\n    // Note that it's important that we do this after the client rects have been adjusted.\n    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n  }\n\n  /**\n   * Checks whether the user's pointer is close to the edges of either the\n   * viewport or the drop list and starts the auto-scroll sequence.\n   * @param pointerX User's pointer position along the x axis.\n   * @param pointerY User's pointer position along the y axis.\n   */\n  _startScrollingIfNecessary(pointerX: number, pointerY: number) {\n    if (this.autoScrollDisabled) {\n      return;\n    }\n\n    let scrollNode: HTMLElement | Window | undefined;\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n    // Check whether we should start scrolling any of the parent containers.\n    this._parentPositions.positions.forEach((position, element) => {\n      // We have special handling for the `document` below. Also this would be\n      // nicer with a  for...of loop, but it requires changing a compiler flag.\n      if (element === this._document || !position.clientRect || scrollNode) {\n        return;\n      }\n\n      if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD,\n          pointerX, pointerY)) {\n        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(\n            element as HTMLElement, position.clientRect, pointerX, pointerY);\n\n        if (verticalScrollDirection || horizontalScrollDirection) {\n          scrollNode = element as HTMLElement;\n        }\n      }\n    });\n\n    // Otherwise check if we can start scrolling the viewport.\n    if (!verticalScrollDirection && !horizontalScrollDirection) {\n      const {width, height} = this._viewportRuler.getViewportSize();\n      const clientRect = {width, height, top: 0, right: width, bottom: height, left: 0};\n      verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n      scrollNode = window;\n    }\n\n    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n        horizontalScrollDirection !== this._horizontalScrollDirection ||\n        scrollNode !== this._scrollNode)) {\n      this._verticalScrollDirection = verticalScrollDirection;\n      this._horizontalScrollDirection = horizontalScrollDirection;\n      this._scrollNode = scrollNode;\n\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n        this._ngZone.runOutsideAngular(this._startScrollInterval);\n      } else {\n        this._stopScrolling();\n      }\n    }\n  }\n\n  /** Stops any currently-running auto-scroll sequences. */\n  _stopScrolling() {\n    this._stopScrollTimers.next();\n  }\n\n  /** Caches the positions of the configured scrollable parents. */\n  private _cacheParentPositions() {\n    const element = coerceElement(this.element);\n    this._parentPositions.cache(this._scrollableElements);\n\n    // The list element is always in the `scrollableElements`\n    // so we can take advantage of the cached `ClientRect`.\n    this._clientRect = this._parentPositions.positions.get(element)!.clientRect!;\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = drag.getVisibleElement();\n      return {drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure)};\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                            a.clientRect.top - b.clientRect.top;\n    });\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    const styles = coerceElement(this.element).style as DragCSSStyleDeclaration;\n    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => {\n      const rootElement = item.getRootElement();\n\n      if (rootElement) {\n        rootElement.style.transform = '';\n      }\n    });\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n    this._previousSwap.overlaps = false;\n    this._stopScrolling();\n    this._viewportScrollSubscription.unsubscribe();\n    this._parentPositions.clear();\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: CachedItemPosition[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Checks if pointer is entering in the first position\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   */\n  private _shouldEnterAsFirstChild(pointerX: number, pointerY: number) {\n    if (!this._activeDraggables.length) {\n      return false;\n    }\n\n    const itemPositions = this._itemPositions;\n    const isHorizontal = this._orientation === 'horizontal';\n\n    // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n    // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n    const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n    if (reversed) {\n      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n    } else {\n      const firstItemRect = itemPositions[0].clientRect;\n      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n    }\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, their cursor hasn't left\n        // the item after we made the swap, and they didn't change the direction in which they're\n        // dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n            direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n    });\n  }\n\n  /** Caches the current items in the list and their positions. */\n  private _cacheItems(): void {\n    this._activeDraggables = this._draggables.slice();\n    this._cacheItemPositions();\n    this._cacheParentPositions();\n  }\n\n  /** Starts the interval that'll auto-scroll the element. */\n  private _startScrollInterval = () => {\n    this._stopScrolling();\n\n    interval(0, animationFrameScheduler)\n      .pipe(takeUntil(this._stopScrollTimers))\n      .subscribe(() => {\n        const node = this._scrollNode;\n\n        if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n          incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n        } else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n          incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n        }\n\n        if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n          incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n        } else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n          incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n        }\n      });\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._clientRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n      return false;\n    }\n\n    const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y) as HTMLElement | null;\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    const nativeElement = coerceElement(this.element);\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling)) {\n      activeSiblings.add(sibling);\n      this._cacheParentPositions();\n      this._listenToScrollEvents();\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n    this._viewportScrollSubscription.unsubscribe();\n  }\n\n  /**\n   * Starts listening to scroll events on the viewport.\n   * Used for updating the internal state of the list.\n   */\n  private _listenToScrollEvents() {\n    this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n      if (this.isDragging()) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n\n        if (scrollDifference) {\n          // Since we know the amount that the user has scrolled we can shift all of the\n          // client rectangles ourselves. This is cheaper than re-measuring everything and\n          // we can avoid inconsistent behavior where we might be measuring the element before\n          // its position has changed.\n          this._itemPositions.forEach(({clientRect}) => {\n            adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n          });\n\n          // We need two loops for this, because we want all of the cached\n          // positions to be up-to-date before we re-sort the item.\n          this._itemPositions.forEach(({drag}) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n              // We need to re-sort the item manually, because the pointer move\n              // events won't be dispatched while the user is scrolling.\n              drag._sortFromLastPointerPosition();\n            }\n          });\n        }\n      } else if (this.isReceiving()) {\n        this._cacheParentPositions();\n      }\n    });\n  }\n\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n  private _getShadowRoot(): DocumentOrShadowRoot {\n    if (!this._cachedShadowRoot) {\n      const shadowRoot = _getShadowRoot(coerceElement(this.element)) as ShadowRoot | null;\n      this._cachedShadowRoot = shadowRoot || this._document;\n    }\n\n    return this._cachedShadowRoot;\n  }\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node: HTMLElement | Window, amount: number) {\n  if (node === window) {\n    (node as Window).scrollBy(0, amount);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    (node as HTMLElement).scrollTop += amount;\n  }\n}\n\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node: HTMLElement | Window, amount: number) {\n  if (node === window) {\n    (node as Window).scrollBy(amount, 0);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    (node as HTMLElement).scrollLeft += amount;\n  }\n}\n\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect: ClientRect, pointerY: number) {\n  const {top, bottom, height} = clientRect;\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return AutoScrollVerticalDirection.UP;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return AutoScrollVerticalDirection.DOWN;\n  }\n\n  return AutoScrollVerticalDirection.NONE;\n}\n\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect: ClientRect, pointerX: number) {\n  const {left, right, width} = clientRect;\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return AutoScrollHorizontalDirection.LEFT;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return AutoScrollHorizontalDirection.RIGHT;\n  }\n\n  return AutoScrollHorizontalDirection.NONE;\n}\n\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element: HTMLElement, clientRect: ClientRect, pointerX: number,\n  pointerY: number): [AutoScrollVerticalDirection, AutoScrollHorizontalDirection] {\n  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n  let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n  // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n  if (computedVertical) {\n    const scrollTop = element.scrollTop;\n\n    if (computedVertical === AutoScrollVerticalDirection.UP) {\n      if (scrollTop > 0) {\n        verticalScrollDirection = AutoScrollVerticalDirection.UP;\n      }\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n    }\n  }\n\n  if (computedHorizontal) {\n    const scrollLeft = element.scrollLeft;\n\n    if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n      if (scrollLeft > 0) {\n        horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n      }\n    } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n      horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n    }\n  }\n\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /** Emits when the viewport has been scrolled while the user is dragging an item. */\n  readonly scroll: Subject<Event> = new Subject<Event>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._persistentTouchmoveListener,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._persistentTouchmoveListener,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\n    if (this._activeDragInstances.has(drag)) {\n      return;\n    }\n\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(isTouchEvent ? 'touchend' : 'mouseup', {\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\n          options: true\n        })\n        .set('scroll', {\n          handler: (e: Event) => this.scroll.next(e),\n          // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n          // the document. See https://github.com/angular/components/issues/17144.\n          options: true\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n\n      // We don't have to bind a move event for touch drag sequences, because\n      // we already have a persistent global one bound from `registerDragItem`.\n      if (!isTouchEvent) {\n        this._globalListeners.set('mousemove', {\n          handler: (e: Event) => this.pointerMove.next(e as MouseEvent),\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n  private _persistentTouchmoveListener = (event: TouchEvent) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n      this.pointerMove.next(event);\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DragRef, DragRefConfig} from './drag-ref';\nimport {DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDrop {\n  constructor(\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\n\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document, this._ngZone,\n        this._viewportRuler);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkDrag} from './directives/drag';\nimport {CdkDropList} from './directives/drop-list';\n\n/** Event emitted when the user starts dragging a draggable. */\nexport interface CdkDragStart<T = any> {\n  /** Draggable that emitted the event. */\n  source: CdkDrag<T>;\n}\n\n/** Event emitted when the user releases an item, before any animations have started. */\nexport interface CdkDragRelease<T = any> {\n  /** Draggable that emitted the event. */\n  source: CdkDrag<T>;\n}\n\n/** Event emitted when the user stops dragging a draggable. */\nexport interface CdkDragEnd<T = any> {\n  /** Draggable that emitted the event. */\n  source: CdkDrag<T>;\n  /** Distance in pixels that the user has dragged since the drag sequence started. */\n  distance: {x: number, y: number};\n}\n\n/** Event emitted when the user moves an item into a new drop container. */\nexport interface CdkDragEnter<T = any, I = T> {\n  /** Container into which the user has moved the item. */\n  container: CdkDropList<T>;\n  /** Item that was moved into the container. */\n  item: CdkDrag<I>;\n  /** Index at which the item has entered the container. */\n  currentIndex: number;\n}\n\n/**\n * Event emitted when the user removes an item from a\n * drop container by moving it into another one.\n */\nexport interface CdkDragExit<T = any, I = T> {\n  /** Container from which the user has a removed an item. */\n  container: CdkDropList<T>;\n  /** Item that was removed from the container. */\n  item: CdkDrag<I>;\n}\n\n\n/** Event emitted when the user drops a draggable item inside a drop container. */\nexport interface CdkDragDrop<T, O = T> {\n  /** Index of the item when it was picked up. */\n  previousIndex: number;\n  /** Current index of the item. */\n  currentIndex: number;\n  /** Item that is being dropped. */\n  item: CdkDrag;\n  /** Container in which the item was dropped. */\n  container: CdkDropList<T>;\n  /** Container from which the item was picked up. Can be the same as the `container`. */\n  previousContainer: CdkDropList<O>;\n  /** Whether the user's pointer was over the container when the item was dropped. */\n  isPointerOverContainer: boolean;\n  /** Distance in pixels that the user has dragged since the drag sequence started. */\n  distance: {x: number, y: number};\n}\n\n/** Event emitted as the user is dragging a draggable item. */\nexport interface CdkDragMove<T = any> {\n  /** Item that is being dragged. */\n  source: CdkDrag<T>;\n  /** Position of the user's pointer on the page. */\n  pointerPosition: {x: number, y: number};\n  /** Native event that is causing the dragging. */\n  event: MouseEvent | TouchEvent;\n  /** Distance in pixels that the user has dragged since the drag sequence started. */\n  distance: {x: number, y: number};\n  /**\n   * Indicates the direction in which the user is dragging the element along each axis.\n   * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\n   * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\n   * that the position hasn't changed.\n   */\n  delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n}\n\n/** Event emitted when the user swaps the position of two drag items. */\nexport interface CdkDragSortEvent<T = any, I = T> {\n  /** Index from which the item was sorted previously. */\n  previousIndex: number;\n  /** Index that the item is currently in. */\n  currentIndex: number;\n  /** Container that the item belongs to. */\n  container: CdkDropList<T>;\n  /** Item that is being sorted. */\n  item: CdkDrag<I>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, Input, InjectionToken} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DROP_LIST_GROUP =\n    new InjectionToken<CdkDropListGroup<unknown>>('CdkDropListGroup');\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n  providers: [{provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup}],\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input('cdkDropListGroupDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {DragRefConfig, Point, DragRef} from '../drag-ref';\n\n/** Possible values that can be used to configure the drag start delay. */\nexport type DragStartDelay = number | {touch: number, mouse: number};\n\n/** Possible axis along which dragging can be locked. */\nexport type DragAxis = 'x' | 'y';\n\n/** Function that can be used to constrain the position of a dragged element. */\nexport type DragConstrainPosition = (point: Point, dragRef: DragRef) => Point;\n\n/** Possible orientations for a drop list. */\nexport type DropListOrientation = 'horizontal' | 'vertical';\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragDropConfig>('CDK_DRAG_CONFIG');\n\n/**\n * Object that can be used to configure the drag\n * items and drop lists within a module or a component.\n */\nexport interface DragDropConfig extends Partial<DragRefConfig> {\n  lockAxis?: DragAxis;\n  dragStartDelay?: DragStartDelay;\n  constrainPosition?: DragConstrainPosition;\n  previewClass?: string | string[];\n  boundaryElement?: string;\n  rootElementSelector?: string;\n  draggingDisabled?: boolean;\n  sortingDisabled?: boolean;\n  listAutoScrollDisabled?: boolean;\n  listOrientation?: DropListOrientation;\n  zIndex?: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {CdkDrag} from './drag';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_GROUP, CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\nimport {DragDrop} from '../drag-drop';\nimport {DropListOrientation, DragAxis, DragDropConfig, CDK_DRAG_CONFIG} from './config';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropList>('CdkDropList');\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CDK_DROP_LIST_GROUP, useValue: undefined},\n    {provide: CDK_DROP_LIST, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-disabled]': 'disabled',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkDropList<T = any> implements OnDestroy {\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Whether the element's scrollable parents have been resolved. */\n  private _scrollableParentsResolved: boolean;\n\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: DropListOrientation;\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: DragAxis;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    // Usually we sync the directive and ref state right before dragging starts, in order to have\n    // a single point of failure and to avoid having to use setters for everything. `disabled` is\n    // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n    // the user in a disabled state, so we also need to sync it as it's being set.\n    this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether sorting within this drop list is disabled. */\n  @Input('cdkDropListSortingDisabled')\n  sortingDisabled: boolean;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n  @Input('cdkDropListAutoScrollDisabled')\n  autoScrollDisabled: boolean;\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  /**\n   * Keeps track of the items that are registered with this container. Historically we used to\n   * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n   * well which means that we can't handle cases like dragging the headers of a `mat-table`\n   * correctly. What we do instead is to have the items register themselves with the container\n   * and then we sort them based on their position in the DOM.\n   */\n  private _unsortedItems = new Set<CdkDrag>();\n\n  constructor(\n      /** Element that the drop list is attached to. */\n      public element: ElementRef<HTMLElement>, dragDrop: DragDrop,\n      private _changeDetectorRef: ChangeDetectorRef, @Optional() private _dir?: Directionality,\n      @Optional() @Inject(CDK_DROP_LIST_GROUP) @SkipSelf()\n      private _group?: CdkDropListGroup<CdkDropList>,\n\n      /**\n       * @deprecated _scrollDispatcher parameter to become required.\n       * @breaking-change 11.0.0\n       */\n      private _scrollDispatcher?: ScrollDispatcher,\n      @Optional() @Inject(CDK_DRAG_CONFIG) config?: DragDropConfig) {\n    this._dropListRef = dragDrop.createDropList(element);\n    this._dropListRef.data = this;\n\n    if (config) {\n      this._assignDefaults(config);\n    }\n\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._setupInputSyncSubscription(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  /** Registers an items with the drop list. */\n  addItem(item: CdkDrag): void {\n    this._unsortedItems.add(item);\n\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef();\n    }\n  }\n\n  /** Removes an item from the drop list. */\n  removeItem(item: CdkDrag): void {\n    this._unsortedItems.delete(item);\n\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef();\n    }\n  }\n\n  /** Gets the registered items in the list, sorted by their position in the DOM. */\n  getSortedItems(): CdkDrag[] {\n    return Array.from(this._unsortedItems).sort((a: CdkDrag, b: CdkDrag) => {\n      const documentPosition =\n          a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n\n      // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n      // tslint:disable-next-line:no-bitwise\n      return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n    });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._unsortedItems.clear();\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _setupInputSyncSubscription(ref: DropListRef<CdkDropList>) {\n    if (this._dir) {\n      this._dir.change\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n        .subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        if (typeof drop === 'string') {\n          const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n\n          if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n          }\n\n          return correspondingDropList!;\n        }\n\n        return drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      // Note that we resolve the scrollable parents here so that we delay the resolution\n      // as long as possible, ensuring that the element is in its final place in the DOM.\n      // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n      if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n        const scrollableParents = this._scrollDispatcher\n          .getAncestorScrollContainers(this.element)\n          .map(scrollable => scrollable.getElementRef().nativeElement);\n        this._dropListRef.withScrollableParents(scrollableParents);\n\n        // Only do this once since it involves traversing the DOM and the parents\n        // shouldn't be able to change without the drop list being destroyed.\n        this._scrollableParentsResolved = true;\n      }\n\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n      ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation);\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._syncItemsWithRef();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data,\n        currentIndex: event.currentIndex\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        distance: event.distance\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Assigns the default input values based on a provided config object. */\n  private _assignDefaults(config: DragDropConfig) {\n    const {\n      lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation\n    } = config;\n\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n    this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n    this.orientation = listOrientation || 'vertical';\n\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n  }\n\n  /** Syncs up the registered drag items with underlying drop list ref. */\n  private _syncItemsWithRef() {\n    this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_sortingDisabled: BooleanInput;\n  static ngAcceptInputType_autoScrollDisabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DRAG_HANDLE = new InjectionToken<CdkDragHandle>('CdkDragHandle');\n\n/** Handle that can be used to drag a CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  },\n  providers: [{provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle}],\n})\nexport class CdkDragHandle implements OnDestroy {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() @SkipSelf() parentDrag?: any) {\n    this._parentDrag = parentDrag;\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input, InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DRAG_PLACEHOLDER = new InjectionToken<CdkDragPlaceholder>('CdkDragPlaceholder');\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]',\n  providers: [{provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder}],\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, InjectionToken, Input, TemplateRef} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DRAG_PREVIEW = new InjectionToken<CdkDragPreview>('CdkDragPreview');\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]',\n  providers: [{provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview}],\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n\n  /** Whether the preview should preserve the same size as the item that is being dragged. */\n  @Input()\n  get matchSize(): boolean { return this._matchSize; }\n  set matchSize(value: boolean) { this._matchSize = coerceBooleanProperty(value); }\n  private _matchSize = false;\n\n  constructor(public templateRef: TemplateRef<T>) {}\n\n  static ngAcceptInputType_matchSize: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  Self,\n} from '@angular/core';\nimport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  coerceElement,\n  BooleanInput\n} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CDK_DRAG_HANDLE, CdkDragHandle} from './drag-handle';\nimport {CDK_DRAG_PLACEHOLDER, CdkDragPlaceholder} from './drag-placeholder';\nimport {CDK_DRAG_PREVIEW, CdkDragPreview} from './drag-preview';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, Point} from '../drag-ref';\nimport {CDK_DROP_LIST, CdkDropListInternal as CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\nimport {CDK_DRAG_CONFIG, DragDropConfig, DragStartDelay, DragAxis} from './config';\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CDK_DRAG_HANDLE, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CDK_DRAG_PREVIEW) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CDK_DRAG_PLACEHOLDER) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: DragAxis;\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Node or selector that will be used to determine the element to which the draggable's\n   * position will be constrained. If a string is passed in, it'll be used as a selector that\n   * will be matched starting from the element's parent and going up the DOM until a match\n   * has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElement: string | ElementRef<HTMLElement> | HTMLElement;\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  @Input('cdkDragStartDelay') dragStartDelay: DragStartDelay;\n\n  /**\n   * Sets the position of a `CdkDrag` that is outside of a drop container.\n   * Can be used to restore the element's position for a returning user.\n   */\n  @Input('cdkDragFreeDragPosition') freeDragPosition: {x: number, y: number};\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled: boolean;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page and should return a point describing where the item should\n   * be rendered.\n   */\n  @Input('cdkDragConstrainPosition') constrainPosition?: (point: Point, dragRef: DragRef) => Point;\n\n  /** Class to be added to the preview element. */\n  @Input('cdkDragPreviewClass') previewClass: string | string[];\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta,\n          distance: movedEvent.distance\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n      /** Element that the draggable is attached to. */\n      public element: ElementRef<HTMLElement>,\n      /** Droppable container that the draggable is a part of. */\n      @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() public dropContainer: CdkDropList,\n      @Inject(DOCUMENT) private _document: any, private _ngZone: NgZone,\n      private _viewContainerRef: ViewContainerRef,\n      @Optional() @Inject(CDK_DRAG_CONFIG) config: DragDropConfig,\n      @Optional() private _dir: Directionality, dragDrop: DragDrop,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Self() @Inject(CDK_DRAG_HANDLE) private _selfHandle?: CdkDragHandle) {\n    this._dragRef = dragDrop.createDrag(element, {\n      dragStartThreshold: config && config.dragStartThreshold != null ?\n          config.dragStartThreshold : 5,\n      pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n          config.pointerDirectionChangeThreshold : 5,\n      zIndex: config?.zIndex\n    });\n    this._dragRef.data = this;\n\n    if (config) {\n      this._assignDefaults(config);\n    }\n\n    // Note that usually the container is assigned when the drop list is picks up the item, but in\n    // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n    // where there are no items on the first change detection pass, but the items get picked up as\n    // soon as the user triggers another pass by dragging. This is a problem, because the item would\n    // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n    // is too late since the two modes save different kinds of information. We work around it by\n    // assigning the drop container both from here and the list.\n    if (dropContainer) {\n      this._dragRef._withDropContainer(dropContainer._dropListRef);\n      dropContainer.addItem(this);\n    }\n\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  /**\n   * Gets the pixel coordinates of the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): {readonly x: number, readonly y: number} {\n    return this._dragRef.getFreeDragPosition();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n              childHandleElements.push(this.element);\n            }\n\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => {\n              return item._stateChanges.pipe(startWith(item));\n            })) as Observable<CdkDragHandle>;\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n    const positionChange = changes['freeDragPosition'];\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n\n    // Skip the first change since it's being handled in `ngAfterViewInit`.\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.dropContainer) {\n      this.dropContainer.removeItem(this);\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE &&\n        (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElement` value. */\n  private _getBoundaryElement() {\n    const boundary = this.boundaryElement;\n\n    if (!boundary) {\n      return null;\n    }\n\n    if (typeof boundary === 'string') {\n      return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n    }\n\n    const element = coerceElement(boundary);\n\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n      !element.contains(this.element.nativeElement)) {\n      throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n    }\n\n    return element;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const dragStartDelay = this.dragStartDelay;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          matchSize: this._previewTemplate.matchSize,\n          viewContainer: this._viewContainerRef\n        } : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n            dragStartDelay : coerceNumberProperty(dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref.previewClass = this.previewClass;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview);\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(event => {\n      this.ended.emit({source: this, distance: event.distance});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this,\n        currentIndex: event.currentIndex\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this,\n        distance: event.distance\n      });\n    });\n  }\n\n  /** Assigns the default input values based on a provided config object. */\n  private _assignDefaults(config: DragDropConfig) {\n    const {\n      lockAxis, dragStartDelay, constrainPosition, previewClass,\n      boundaryElement, draggingDisabled, rootElementSelector\n    } = config;\n\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.dragStartDelay = dragStartDelay || 0;\n\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n\n    if (constrainPosition) {\n      this.constrainPosition = constrainPosition;\n    }\n\n    if (previewClass) {\n      this.previewClass = previewClass;\n    }\n\n    if (boundaryElement) {\n      this.boundaryElement = boundaryElement;\n    }\n\n    if (rootElementSelector) {\n      this.rootElementSelector = rootElementSelector;\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [\n    DragDrop,\n  ]\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {DragDrop} from './drag-drop';\nexport {DragRef, DragRefConfig, Point} from './drag-ref';\nexport {DropListRef} from './drop-list-ref';\nexport {CDK_DRAG_PARENT} from './drag-parent';\n\nexport * from './drag-events';\nexport * from './drag-utils';\nexport * from './drag-drop-module';\nexport * from './drag-drop-registry';\n\nexport {CdkDropList, CDK_DROP_LIST} from './directives/drop-list';\nexport * from './directives/config';\nexport * from './directives/drop-list-group';\nexport * from './directives/drag';\nexport * from './directives/drag-handle';\nexport * from './directives/drag-preview';\nexport * from './directives/drag-placeholder';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CdkDropListInternal as Éµangular_material_src_cdk_drag_drop_drag_drop_a} from './directives/drop-list';"],"sourceRoot":"webpack:///"}