{"version":3,"sources":["../../../../../../src/material/paginator/paginator-intl.ts","../../../../../../src/material/paginator/paginator.ts","../../../../../../src/material/paginator/paginator-module.ts","../../../../../../src/material/paginator/public-api.ts","../../../../../../src/material/paginator/index.ts","../../../../../../src/material/icon/icon-registry.ts","../../../../../../src/material/icon/icon.ts","../../../../../../src/material/icon/icon-module.ts","../../../../../../src/material/icon/public-api.ts","../../../../../../src/material/icon/index.ts","../../../../../../src/material/stepper/step-label.ts","../../../../../../src/material/stepper/stepper-intl.ts","../../../../../../src/material/stepper/step-header.ts","../../../../../../src/material/stepper/stepper-animations.ts","../../../../../../src/material/stepper/stepper-icon.ts","../../../../../../src/material/stepper/stepper.ts","../../../../../../src/material/stepper/stepper-button.ts","../../../../../../src/material/stepper/stepper-module.ts","../../../../../../src/material/stepper/public-api.ts","../../../../../../src/material/stepper/index.ts","../../../../../../src/cdk/stepper/step-header.ts","../../../../../../src/cdk/stepper/step-label.ts","../../../../../../src/cdk/stepper/stepper.ts","../../../../../../src/cdk/stepper/stepper-button.ts","../../../../../../src/cdk/stepper/stepper-module.ts","../../../../../../src/cdk/stepper/public-api.ts","../../../../../../src/cdk/stepper/index.ts","../../../../../../src/material/autocomplete/autocomplete.ts","../../../../../../src/material/autocomplete/autocomplete-origin.ts","../../../../../../src/material/autocomplete/autocomplete-trigger.ts","../../../../../../src/material/autocomplete/autocomplete-module.ts","../../../../../../src/material/autocomplete/public-api.ts","../../../../../../src/material/autocomplete/index.ts"],"names":["observableOf","observableThrow"],"mappings":"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","file":"default~paginas-aerc-solicitudes-admin-aerc-admin-aprobador-admin-aprobador-module-ngfactory~paginas~a78ee3b4.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel: (page: number, pageSize: number, length: number) => string =\n    (page: number, pageSize: number, length: number) => {\n      if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n      length = Math.max(length, 0);\n\n      const startIndex = page * pageSize;\n\n      // If the start index exceeds the list length, do not try and fix the end index to the end.\n      const endIndex = startIndex < length ?\n          Math.min(startIndex + pageSize, length) :\n          startIndex + pageSize;\n\n      return `${startIndex + 1} â ${endIndex} of ${length}`;\n    }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceNumberProperty,\n  coerceBooleanProperty,\n  BooleanInput,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\nimport {MatFormFieldAppearance} from '@angular/material/form-field';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n\n/** Object that can be used to configure the default options for the paginator module. */\nexport interface MatPaginatorDefaultOptions {\n  /** Number of items to display on a page. By default set to 50. */\n  pageSize?: number;\n\n  /** The set of provided page size options to display to the user. */\n  pageSizeOptions?: number[];\n\n  /** Whether to hide the page size selection UI from the user. */\n  hidePageSize?: boolean;\n\n  /** Whether to show the first/last buttons UI to the user. */\n  showFirstLastButtons?: boolean;\n\n  /** The default form-field appearance to apply to the page size options selector. */\n  formFieldAppearance?: MatFormFieldAppearance;\n}\n\n/** Injection token that can be used to provide the default options for the paginator module. */\nexport const MAT_PAGINATOR_DEFAULT_OPTIONS =\n    new InjectionToken<MatPaginatorDefaultOptions>('MAT_PAGINATOR_DEFAULT_OPTIONS');\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  /** If set, styles the \"page size\" form field with the designated style. */\n  _formFieldAppearance?: MatFormFieldAppearance;\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_PAGINATOR_DEFAULT_OPTIONS)\n                  defaults?: MatPaginatorDefaultOptions) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n\n    if (defaults) {\n      const {\n        pageSize,\n        pageSizeOptions,\n        hidePageSize,\n        showFirstLastButtons,\n        formFieldAppearance,\n      } = defaults;\n\n      if (pageSize != null) {\n        this._pageSize = pageSize;\n      }\n\n      if (pageSizeOptions != null) {\n        this._pageSizeOptions = pageSizeOptions;\n      }\n\n      if (hidePageSize != null) {\n        this._hidePageSize = hidePageSize;\n      }\n\n      if (showFirstLastButtons != null) {\n        this._showFirstLastButtons = showFirstLastButtons;\n      }\n\n      if (formFieldAppearance != null) {\n        this._formFieldAppearance = formFieldAppearance;\n      }\n    }\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n\n  static ngAcceptInputType_pageIndex: NumberInput;\n  static ngAcceptInputType_length: NumberInput;\n  static ngAcceptInputType_pageSize: NumberInput;\n  static ngAcceptInputType_hidePageSize: BooleanInput;\n  static ngAcceptInputType_showFirstLastButtons: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './paginator-module';\nexport * from './paginator';\nexport * from './paginator-intl';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n\n  /** Whether or not to fetch the icon or icon set using HTTP credentials. */\n  withCredentials?: boolean;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null;\n\n  constructor(\n    public url: SafeResourceUrl,\n    public svgText: string | null,\n    public options?: IconOptions) {}\n}\n\n/** Icon configuration whose content has already been loaded. */\ntype LoadedSvgIconConfig = SvgIconConfig & {svgText: string};\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    private readonly _errorHandler: ErrorHandler) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    // TODO: add an ngDevMode check\n    if (!cleanLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    return this._addSvgIconConfig(namespace, iconName,\n        new SvgIconConfig('', cleanLiteral, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!cleanLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgText) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(this._svgElementFromConfig(config as LoadedSvgIconConfig)));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<string | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgText)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse) => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n            this._errorHandler.handleError(new Error(errorMessage));\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      // TODO: add an ngDevMode check\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n\n      // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n      // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n      // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n      // some of the parsing.\n      if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n        const svg = this._svgElementFromConfig(config as LoadedSvgIconConfig);\n        const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchIcon(config).pipe(\n      tap(svgText => config.svgText = svgText),\n      map(() => this._svgElementFromConfig(config as LoadedSvgIconConfig))\n    );\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the\n   * SvgIconConfig and attaches it to the config.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<string | null> {\n    if (config.svgText) {\n      return observableOf(null);\n    }\n\n    return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    // TODO: add an ngDevMode check\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    const svg = this._svgElementFromString('<svg></svg>');\n    const attributes = element.attributes;\n\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {name, value} = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given icon. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchIcon(iconConfig: SvgIconConfig): Observable<string> {\n    const {url: safeUrl, options} = iconConfig;\n    const withCredentials = options?.withCredentials ?? false;\n\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    // TODO: add an ngDevMode check\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    // TODO: add an ngDevMode check\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    const req = this._httpClient.get(url, {responseType: 'text', withCredentials}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n\n  /** Parses a config's text into an SVG element. */\n  private _svgElementFromConfig(config: LoadedSvgIconConfig): SVGElement {\n    if (!config.svgElement) {\n      const svg = this._svgElementFromString(config.svgText);\n      this._setSvgAttributes(svg, config.options);\n      config.svgElement = svg;\n    }\n\n    return config.svgElement;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  errorHandler: ErrorHandler,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    ErrorHandler,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ErrorHandler,\n  inject,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnInit, AfterViewChecked, CanColor,\n  OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input()\n  get svgIcon(): string { return this._svgIcon; }\n  set svgIcon(value: string) {\n    if (value !== this._svgIcon) {\n      if (value) {\n        this._updateSvgIcon(value);\n      } else if (this._svgIcon) {\n        this._clearSvgElement();\n      }\n      this._svgIcon = value;\n    }\n  }\n  private _svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    const newValue = this._cleanupFontValue(value);\n\n    if (newValue !== this._fontSet) {\n      this._fontSet = newValue;\n      this._updateFontIconClasses();\n    }\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    const newValue = this._cleanupFontValue(value);\n\n    if (newValue !== this._fontIcon) {\n      this._fontIcon = newValue;\n      this._updateFontIconClasses();\n    }\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  _svgName: string | null;\n  _svgNamespace: string | null;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  /** Subscription to the current in-progress SVG icon request. */\n  private _currentIconFetch = Subscription.EMPTY;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>, private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      @Inject(MAT_ICON_LOCATION) private _location: MatIconLocation,\n      private readonly _errorHandler: ErrorHandler) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    this._updateFontIconClasses();\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._currentIconFetch.unsubscribe();\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    const path = this._location.getPathname();\n    this._previousPath = path;\n    this._cacheChildrenWithExternalReferences(svg);\n    this._prependPathToReferences(path);\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n\n  /** Sets a new SVG icon with a particular name. */\n  private _updateSvgIcon(rawName: string|undefined) {\n    this._svgNamespace = null;\n    this._svgName = null;\n    this._currentIconFetch.unsubscribe();\n\n    if (rawName) {\n      const [namespace, iconName] = this._splitIconName(rawName);\n\n      if (namespace) {\n        this._svgNamespace = namespace;\n      }\n\n      if (iconName) {\n        this._svgName = iconName;\n      }\n\n      this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n          .pipe(take(1))\n          .subscribe(svg => this._setSvgElement(svg), (err: Error) => {\n            const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n            this._errorHandler.handleError(new Error(errorMessage));\n          });\n    }\n  }\n\n  static ngAcceptInputType_inline: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './icon-module';\nexport * from './icon';\nexport * from './icon-registry';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n  AfterViewInit,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header mat-focus-indicator',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements AfterViewInit, OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [\n    {provide: ErrorStateMatcher, useExisting: MatStep},\n    {provide: CdkStep, useExisting: MatStep},\n  ],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Full list of steps inside the stepper, including inside nested steppers. */\n  @ContentChildren(MatStep, {descendants: true}) _steps: QueryList<MatStep>;\n\n  /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n  readonly steps: QueryList<MatStep> = new QueryList<MatStep>();\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon, {descendants: true}) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._stateChanged();\n    });\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n\n  static ngAcceptInputType_editable: BooleanInput;\n  static ngAcceptInputType_optional: BooleanInput;\n  static ngAcceptInputType_completed: BooleanInput;\n  static ngAcceptInputType_hasError: BooleanInput;\n}\n\n@Component({\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n\n  static ngAcceptInputType_editable: BooleanInput;\n  static ngAcceptInputType_optional: BooleanInput;\n  static ngAcceptInputType_completed: BooleanInput;\n  static ngAcceptInputType_hasError: BooleanInput;\n}\n\n@Component({\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n\n  static ngAcceptInputType_editable: BooleanInput;\n  static ngAcceptInputType_optional: BooleanInput;\n  static ngAcceptInputType_completed: BooleanInput;\n  static ngAcceptInputType_hasError: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    'class': 'mat-stepper-next',\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    'class': 'mat-stepper-previous',\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './stepper-module';\nexport * from './step-label';\nexport * from './stepper';\nexport * from './stepper-button';\nexport * from './step-header';\nexport * from './stepper-intl';\nexport * from './stepper-animations';\nexport * from './stepper-icon';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {FocusableOption} from '@angular/cdk/a11y';\n\n\n@Directive({\n  selector: '[cdkStepHeader]',\n  host: {\n    'role': 'tab',\n  },\n})\nexport class CdkStepHeader implements FocusableOption {\n  constructor(protected _elementRef: ElementRef<HTMLElement>) {}\n\n  /** Focuses the step header. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[cdkStepLabel]',\n})\nexport class CdkStepLabel {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  AfterContentInit,\n} from '@angular/core';\nimport {Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\nimport {CdkStepHeader} from './step-header';\nimport {CdkStepLabel} from './step-label';\n\n/** Used to generate unique ID for each stepper component. */\nlet nextId = 0;\n\n/**\n * Position state of the content of each step in stepper that is used for transitioning\n * the content into correct position upon step selection change.\n */\nexport type StepContentPositionState = 'previous'|'current'|'next';\n\n/** Possible orientation of a stepper. */\nexport type StepperOrientation = 'horizontal'|'vertical';\n\n/** Change event emitted on selection changes. */\nexport class StepperSelectionEvent {\n  /** Index of the step now selected. */\n  selectedIndex: number;\n\n  /** Index of the step previously selected. */\n  previouslySelectedIndex: number;\n\n  /** The step instance now selected. */\n  selectedStep: CdkStep;\n\n  /** The step instance previously selected. */\n  previouslySelectedStep: CdkStep;\n}\n\n/** The state of each step. */\nexport type StepState = 'number'|'edit'|'done'|'error'|string;\n\n/** Enum to represent the different states of the steps. */\nexport const STEP_STATE = {\n  NUMBER: 'number',\n  EDIT: 'edit',\n  DONE: 'done',\n  ERROR: 'error'\n};\n\n/** InjectionToken that can be used to specify the global stepper options. */\nexport const STEPPER_GLOBAL_OPTIONS = new InjectionToken<StepperOptions>('STEPPER_GLOBAL_OPTIONS');\n\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\n * @breaking-change 8.0.0.\n */\nexport const MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;\n\n/** Configurable options for stepper. */\nexport interface StepperOptions {\n  /**\n   * Whether the stepper should display an error state or not.\n   * Default behavior is assumed to be false.\n   */\n  showError?: boolean;\n\n  /**\n   * Whether the stepper should display the default indicator type\n   * or not.\n   * Default behavior is assumed to be true.\n   */\n  displayDefaultIndicatorType?: boolean;\n}\n\n@Component({\n  selector: 'cdk-step',\n  exportAs: 'cdkStep',\n  template: '<ng-template><ng-content></ng-content></ng-template>',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkStep implements OnChanges {\n  private _stepperOptions: StepperOptions;\n  _showError: boolean;\n  _displayDefaultIndicatorType: boolean;\n\n  /** Template for step label if it exists. */\n  @ContentChild(CdkStepLabel) stepLabel: CdkStepLabel;\n\n  /** Template for step content. */\n  @ViewChild(TemplateRef, {static: true}) content: TemplateRef<any>;\n\n  /** The top level abstract control of the step. */\n  @Input() stepControl: AbstractControlLike;\n\n  /** Whether user has seen the expanded step content or not. */\n  interacted = false;\n\n  /** Plain text label of the step. */\n  @Input() label: string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** State of the step. */\n  @Input() state: StepState;\n\n  /** Whether the user can return to this step once it has been marked as completed. */\n  @Input()\n  get editable(): boolean {\n    return this._editable;\n  }\n  set editable(value: boolean) {\n    this._editable = coerceBooleanProperty(value);\n  }\n  private _editable = true;\n\n  /** Whether the completion of step is optional. */\n  @Input()\n  get optional(): boolean {\n    return this._optional;\n  }\n  set optional(value: boolean) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional = false;\n\n  /** Whether step is marked as completed. */\n  @Input()\n  get completed(): boolean {\n    return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n  }\n  set completed(value: boolean) {\n    this._completedOverride = coerceBooleanProperty(value);\n  }\n  _completedOverride: boolean|null = null;\n\n  private _getDefaultCompleted() {\n    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n  }\n\n  /** Whether step has an error. */\n  @Input()\n  get hasError(): boolean {\n    return this._customError == null ? this._getDefaultError() : this._customError;\n  }\n  set hasError(value: boolean) {\n    this._customError = coerceBooleanProperty(value);\n  }\n  private _customError: boolean|null = null;\n\n  private _getDefaultError() {\n    return this.stepControl && this.stepControl.invalid && this.interacted;\n  }\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(\n      @Inject(forwardRef(() => CdkStepper)) public _stepper: CdkStepper,\n      @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    this._stepperOptions = stepperOptions ? stepperOptions : {};\n    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n    this._showError = !!this._stepperOptions.showError;\n  }\n\n  /** Selects this step component. */\n  select(): void {\n    this._stepper.selected = this;\n  }\n\n  /** Resets the step to its initial state. Note that this includes resetting form data. */\n  reset(): void {\n    this.interacted = false;\n\n    if (this._completedOverride != null) {\n      this._completedOverride = false;\n    }\n\n    if (this._customError != null) {\n      this._customError = false;\n    }\n\n    if (this.stepControl) {\n      this.stepControl.reset();\n    }\n  }\n\n  ngOnChanges() {\n    // Since basically all inputs of the MatStep get proxied through the view down to the\n    // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n    this._stepper._stateChanged();\n  }\n\n  static ngAcceptInputType_editable: BooleanInput;\n  static ngAcceptInputType_hasError: BooleanInput;\n  static ngAcceptInputType_optional: BooleanInput;\n  static ngAcceptInputType_completed: BooleanInput;\n}\n\n@Directive({\n  selector: '[cdkStepper]',\n  exportAs: 'cdkStepper',\n})\nexport class CdkStepper implements AfterContentInit, AfterViewInit, OnDestroy {\n  /** Emits when the component is destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** Used for managing keyboard focus. */\n  private _keyManager: FocusKeyManager<FocusableOption>;\n\n  /**\n   * @breaking-change 8.0.0 Remove `| undefined` once the `_document`\n   * constructor param is required.\n   */\n  private _document: Document|undefined;\n\n  /** Full list of steps inside the stepper, including inside nested steppers. */\n  @ContentChildren(CdkStep, {descendants: true}) _steps: QueryList<CdkStep>;\n\n  /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n  readonly steps: QueryList<CdkStep> = new QueryList<CdkStep>();\n\n  /**\n   * The list of step headers of the steps in the stepper.\n   * @deprecated Type to be changed to `QueryList<CdkStepHeader>`.\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(CdkStepHeader, {descendants: true}) _stepHeader: QueryList<FocusableOption>;\n\n  /** Whether the validity of previous steps should be checked or not. */\n  @Input()\n  get linear(): boolean {\n    return this._linear;\n  }\n  set linear(value: boolean) {\n    this._linear = coerceBooleanProperty(value);\n  }\n  private _linear = false;\n\n  /** The index of the selected step. */\n  @Input()\n  get selectedIndex() {\n    return this._selectedIndex;\n  }\n  set selectedIndex(index: number) {\n    const newIndex = coerceNumberProperty(index);\n\n    if (this.steps && this._steps) {\n      // Ensure that the index can't be out of bounds.\n      if ((newIndex < 0 || newIndex > this.steps.length - 1) &&\n        (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n      }\n\n      if (this._selectedIndex != newIndex && !this._anyControlsInvalidOrPending(newIndex) &&\n          (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n        this._updateSelectedItemIndex(index);\n      }\n    } else {\n      this._selectedIndex = newIndex;\n    }\n  }\n  private _selectedIndex = 0;\n\n  /** The step that is selected. */\n  @Input()\n  get selected(): CdkStep {\n    // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n    return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined!;\n  }\n  set selected(step: CdkStep) {\n    this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\n  }\n\n  /** Event emitted when the selected step has changed. */\n  @Output()\n  selectionChange: EventEmitter<StepperSelectionEvent> = new EventEmitter<StepperSelectionEvent>();\n\n  /** Used to track unique ID for each stepper component. */\n  _groupId: number;\n\n  protected _orientation: StepperOrientation = 'horizontal';\n\n  constructor(\n      @Optional() private _dir: Directionality, private _changeDetectorRef: ChangeDetectorRef,\n      // @breaking-change 8.0.0 `_elementRef` and `_document` parameters to become required.\n      private _elementRef?: ElementRef<HTMLElement>, @Inject(DOCUMENT) _document?: any) {\n    this._groupId = nextId++;\n    this._document = _document;\n  }\n\n  ngAfterContentInit() {\n    this._steps.changes\n      .pipe(startWith(this._steps), takeUntil(this._destroyed))\n      .subscribe((steps: QueryList<CdkStep>) => {\n        this.steps.reset(steps.filter(step => step._stepper === this));\n        this.steps.notifyOnChanges();\n      });\n  }\n\n  ngAfterViewInit() {\n    // Note that while the step headers are content children by default, any components that\n    // extend this one might have them as view children. We initialize the keyboard handling in\n    // AfterViewInit so we're guaranteed for both view and content children to be defined.\n    this._keyManager = new FocusKeyManager<FocusableOption>(this._stepHeader)\n                           .withWrap()\n                           .withHomeAndEnd()\n                           .withVerticalOrientation(this._orientation === 'vertical');\n\n    (this._dir ? (this._dir.change as Observable<Direction>) : observableOf<Direction>())\n        .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n        .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n\n    this._keyManager.updateActiveItem(this._selectedIndex);\n\n    // No need to `takeUntil` here, because we're the ones destroying `steps`.\n    this.steps.changes.subscribe(() => {\n      if (!this.selected) {\n        this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.steps.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Selects and focuses the next step in list. */\n  next(): void {\n    this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n  }\n\n  /** Selects and focuses the previous step in list. */\n  previous(): void {\n    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n  }\n\n  /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n  reset(): void {\n    this._updateSelectedItemIndex(0);\n    this.steps.forEach(step => step.reset());\n    this._stateChanged();\n  }\n\n  /** Returns a unique id for each step label element. */\n  _getStepLabelId(i: number): string {\n    return `cdk-step-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns unique id for each step content element. */\n  _getStepContentId(i: number): string {\n    return `cdk-step-content-${this._groupId}-${i}`;\n  }\n\n  /** Marks the component to be change detected. */\n  _stateChanged() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Returns position state of the step with the given index. */\n  _getAnimationDirection(index: number): StepContentPositionState {\n    const position = index - this._selectedIndex;\n    if (position < 0) {\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n    } else if (position > 0) {\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n    }\n    return 'current';\n  }\n\n  /** Returns the type of icon to be displayed. */\n  _getIndicatorType(index: number, state: StepState = STEP_STATE.NUMBER): StepState {\n    const step = this.steps.toArray()[index];\n    const isCurrentStep = this._isCurrentStep(index);\n\n    return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) :\n                                               this._getGuidelineLogic(step, isCurrentStep, state);\n  }\n\n  private _getDefaultIndicatorLogic(step: CdkStep, isCurrentStep: boolean): StepState {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (!step.completed || isCurrentStep) {\n      return STEP_STATE.NUMBER;\n    } else {\n      return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n    }\n  }\n\n  private _getGuidelineLogic(\n      step: CdkStep, isCurrentStep: boolean, state: StepState = STEP_STATE.NUMBER): StepState {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (step.completed && !isCurrentStep) {\n      return STEP_STATE.DONE;\n    } else if (step.completed && isCurrentStep) {\n      return state;\n    } else if (step.editable && isCurrentStep) {\n      return STEP_STATE.EDIT;\n    } else {\n      return state;\n    }\n  }\n\n  private _isCurrentStep(index: number) {\n    return this._selectedIndex === index;\n  }\n\n  /** Returns the index of the currently-focused step header. */\n  _getFocusIndex() {\n    return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n  }\n\n  private _updateSelectedItemIndex(newIndex: number): void {\n    const stepsArray = this.steps.toArray();\n    this.selectionChange.emit({\n      selectedIndex: newIndex,\n      previouslySelectedIndex: this._selectedIndex,\n      selectedStep: stepsArray[newIndex],\n      previouslySelectedStep: stepsArray[this._selectedIndex],\n    });\n\n    // If focus is inside the stepper, move it to the next header, otherwise it may become\n    // lost when the active step content is hidden. We can't be more granular with the check\n    // (e.g. checking whether focus is inside the active step), because we don't have a\n    // reference to the elements that are rendering out the content.\n    this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\n                            this._keyManager.updateActiveItem(newIndex);\n\n    this._selectedIndex = newIndex;\n    this._stateChanged();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const hasModifier = hasModifierKey(event);\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    if (manager.activeItemIndex != null && !hasModifier &&\n        (keyCode === SPACE || keyCode === ENTER)) {\n      this.selectedIndex = manager.activeItemIndex;\n      event.preventDefault();\n    } else {\n      manager.onKeydown(event);\n    }\n  }\n\n  private _anyControlsInvalidOrPending(index: number): boolean {\n    const steps = this.steps.toArray();\n\n    steps[this._selectedIndex].interacted = true;\n\n    if (this._linear && index >= 0) {\n      return steps.slice(0, index).some(step => {\n        const control = step.stepControl;\n        const isIncomplete =\n            control ? (control.invalid || control.pending || !step.interacted) : !step.completed;\n        return isIncomplete && !step.optional && !step._completedOverride;\n      });\n    }\n\n    return false;\n  }\n\n  private _layoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Checks whether the stepper contains the focused element. */\n  private _containsFocus(): boolean {\n    if (!this._document || !this._elementRef) {\n      return false;\n    }\n\n    const stepperElement = this._elementRef.nativeElement;\n    const focusedElement = this._document.activeElement;\n    return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n  }\n\n  static ngAcceptInputType_editable: BooleanInput;\n  static ngAcceptInputType_optional: BooleanInput;\n  static ngAcceptInputType_completed: BooleanInput;\n  static ngAcceptInputType_hasError: BooleanInput;\n  static ngAcceptInputType_linear: BooleanInput;\n  static ngAcceptInputType_selectedIndex: NumberInput;\n}\n\n\n/**\n * Simplified representation of an \"AbstractControl\" from @angular/forms.\n * Used to avoid having to bring in @angular/forms for a single optional interface.\n * @docs-private\n */\ninterface AbstractControlLike {\n  asyncValidator: ((control: any) => any) | null;\n  dirty: boolean;\n  disabled: boolean;\n  enabled: boolean;\n  errors: {[key: string]: any} | null;\n  invalid: boolean;\n  parent: any;\n  pending: boolean;\n  pristine: boolean;\n  root: AbstractControlLike;\n  status: string;\n  statusChanges: Observable<any>;\n  touched: boolean;\n  untouched: boolean;\n  updateOn: any;\n  valid: boolean;\n  validator: ((control: any) => any) | null;\n  value: any;\n  valueChanges: Observable<any>;\n  clearAsyncValidators(): void;\n  clearValidators(): void;\n  disable(opts?: any): void;\n  enable(opts?: any): void;\n  get(path: (string | number)[] | string): AbstractControlLike | null;\n  getError(errorCode: string, path?: (string | number)[] | string): any;\n  hasError(errorCode: string, path?: (string | number)[] | string): boolean;\n  markAllAsTouched(): void;\n  markAsDirty(opts?: any): void;\n  markAsPending(opts?: any): void;\n  markAsPristine(opts?: any): void;\n  markAsTouched(opts?: any): void;\n  markAsUntouched(opts?: any): void;\n  patchValue(value: any, options?: Object): void;\n  reset(value?: any, options?: Object): void;\n  setAsyncValidators(newValidator: (control: any) => any |\n    ((control: any) => any)[] | null): void;\n  setErrors(errors: {[key: string]: any} | null, opts?: any): void;\n  setParent(parent: any): void;\n  setValidators(newValidator: (control: any) => any |\n    ((control: any) => any)[] | null): void;\n  setValue(value: any, options?: Object): void;\n  updateValueAndValidity(opts?: any): void;\n  patchValue(value: any, options?: any): void;\n  reset(formState?: any, options?: any): void;\n  setValue(value: any, options?: any): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, HostListener, Input} from '@angular/core';\n\nimport {CdkStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperNext]',\n  host: {\n    '[type]': 'type',\n  }\n})\nexport class CdkStepperNext {\n  /** Type of the next button. Defaults to \"submit\" if not specified. */\n  @Input() type: string = 'submit';\n\n  constructor(public _stepper: CdkStepper) {}\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click')\n  _handleClick() {\n    this._stepper.next();\n  }\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  }\n})\nexport class CdkStepperPrevious {\n  /** Type of the previous button. Defaults to \"button\" if not specified. */\n  @Input() type: string = 'button';\n\n  constructor(public _stepper: CdkStepper) {}\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click')\n  _handleClick() {\n    this._stepper.previous();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkStepper, CdkStep} from './stepper';\nimport {CdkStepLabel} from './step-label';\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\nimport {CdkStepHeader} from './step-header';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n@NgModule({\n  imports: [BidiModule],\n  exports: [\n    CdkStep,\n    CdkStepper,\n    CdkStepHeader,\n    CdkStepLabel,\n    CdkStepperNext,\n    CdkStepperPrevious,\n  ],\n  declarations: [\n    CdkStep,\n    CdkStepper,\n    CdkStepHeader,\n    CdkStepLabel,\n    CdkStepperNext,\n    CdkStepperPrevious,\n  ]\n})\nexport class CdkStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './stepper';\nexport * from './step-label';\nexport * from './stepper-button';\nexport * from './stepper-module';\nexport * from './step-header';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n  Directive,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTGROUP,\n  MAT_OPTION_PARENT_COMPONENT,\n  _MatOptgroupBase,\n  _MatOptionBase,\n  mixinDisableRipple,\n  MatOption,\n  MatOptgroup,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: _MatAutocompleteBase,\n    /** Option that was selected. */\n    public option: _MatOptionBase) { }\n}\n\n/** Event object that is emitted when an autocomplete option is activated. */\nexport interface MatAutocompleteActivatedEvent {\n  /** Reference to the autocomplete panel that emitted the event. */\n  source: _MatAutocompleteBase;\n\n  /** Option that was selected. */\n  option: _MatOptionBase|null;\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n/** Base class with all of the `MatAutocomplete` functionality. */\n@Directive()\nexport abstract class _MatAutocompleteBase extends _MatAutocompleteMixinBase implements\n  AfterContentInit, CanDisableRipple, OnDestroy {\n  private _activeOptionChanges = Subscription.EMPTY;\n\n  /** Class to apply to the panel when it's visible. */\n  protected abstract _visibleClass: string;\n\n  /** Class to apply to the panel when it's hidden. */\n  protected abstract _hiddenClass: string;\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<_MatOptionBase>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  abstract options: QueryList<_MatOptionBase>;\n\n  /** @docs-private */\n  abstract optionGroups: QueryList<_MatOptgroupBase>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits whenever an option is activated using the keyboard. */\n  @Output() readonly optionActivated: EventEmitter<MatAutocompleteActivatedEvent> =\n      new EventEmitter<MatAutocompleteActivatedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<_MatOptionBase>(this.options).withWrap();\n    this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n      this.optionActivated.emit({source: this, option: this.options.toArray()[index] || null});\n    });\n\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  ngOnDestroy() {\n    this._activeOptionChanges.unsubscribe();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: _MatOptionBase): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList[this._visibleClass] = this.showPanel;\n    classList[this._hiddenClass] = !this.showPanel;\n  }\n\n  static ngAcceptInputType_autoActiveFirstOption: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n@Component({\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteBase {\n  @ContentChildren(MAT_OPTGROUP, {descendants: true}) optionGroups: QueryList<MatOptgroup>;\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n  protected _visibleClass = 'mat-autocomplete-visible';\n  protected _hiddenClass = 'mat-autocomplete-hidden';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n@Directive()\nexport abstract class _MatAutocompleteOriginBase {\n  constructor(\n    /** Reference to the element on which the directive is applied. */\n    public elementRef: ElementRef<HTMLElement>) {}\n}\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin extends _MatAutocompleteOriginBase {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {_getShadowRoot} from '@angular/cdk/platform';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MAT_FORM_FIELD, MatFormField} from '@angular/material/form-field';\nimport {defer, fromEvent, merge, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {delay, filter, map, switchMap, take, tap} from 'rxjs/operators';\n\nimport {_MatAutocompleteBase} from './autocomplete';\nimport {_MatAutocompleteOriginBase} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 11.0.0\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 11.0.0\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n@Directive()\nexport abstract class _MatAutocompleteTriggerBase implements ControlValueAccessor, AfterViewInit,\n  OnChanges, OnDestroy {\n\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: _MatAutocompleteBase;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: _MatAutocompleteOriginBase;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(MAT_FORM_FIELD) @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              private _viewportRuler: ViewportRuler) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /** Class to apply to the panel when it's above the input. */\n  protected abstract _aboveClass: string;\n\n  ngAfterViewInit() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n      return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n            fromEvent(this._document, 'click') as Observable<MouseEvent>,\n            fromEvent(this._document, 'touchend') as Observable<TouchEvent>)\n        .pipe(filter(event => {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          const clickTarget =\n              (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                                                                event.target) as HTMLElement;\n          const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n          const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n\n          return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!customOrigin || !customOrigin.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    // We want to resolve this once, as late as possible so that we can be\n    // sure that the element has been moved into its final place in the DOM.\n    if (this._isInsideShadowRoot == null) {\n      this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n            (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n\n      this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n        if (this.panelOpen && overlayRef) {\n          overlayRef.updateSize({width: this._getPanelWidth()});\n        }\n      });\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    // Note that we provide horizontal fallback positions, even though by default the dropdown\n    // width matches the input, because consumers can override the width. See #18854.\n    const belowPositions: ConnectedPosition[] = [\n      {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n      {originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top'}\n    ];\n\n    // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n    const panelClass = this._aboveClass;\n    const abovePositions: ConnectedPosition[] = [\n      {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass},\n      {originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass}\n    ];\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = abovePositions;\n    } else if (this.position === 'below') {\n      positions = belowPositions;\n    } else {\n      positions = [...belowPositions, ...abovePositions];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef<HTMLElement> {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document?.defaultView || window;\n  }\n\n  /** Scrolls to a particular option in the list. */\n  private _scrollToOption(index: number): void {\n    // Given that we are not actually focusing active options, we must manually adjust scroll\n    // to reveal options below the fold. First, we find the offset of the option from the top\n    // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n    // the panel height + the option height, so the active option will be just visible at the\n    // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n    // will become the offset. If that offset is visible within the panel already, the scrollTop is\n    // not adjusted.\n    const autocomplete = this.autocomplete;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n      autocomplete.options, autocomplete.optionGroups);\n\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      autocomplete._setScrollTop(0);\n    } else {\n      const option = autocomplete.options.toArray()[index];\n\n      if (option) {\n        const element = option._getHostElement();\n        const newScrollPosition = _getOptionScrollPosition(\n          element.offsetTop,\n          element.offsetHeight,\n          autocomplete._getScrollTop(),\n          autocomplete.panel.nativeElement.offsetHeight\n        );\n\n        autocomplete._setScrollTop(newScrollPosition);\n      }\n    }\n  }\n\n  static ngAcceptInputType_autocompleteDisabled: BooleanInput;\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'class': 'mat-autocomplete-trigger',\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n  protected _aboveClass = 'mat-autocomplete-panel-above';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n    CommonModule\n  ],\n  exports: [\n    MatAutocomplete,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    CdkScrollableModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './autocomplete';\nexport * from './autocomplete-module';\nexport * from './autocomplete-trigger';\nexport * from './autocomplete-origin';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"sourceRoot":"webpack:///"}