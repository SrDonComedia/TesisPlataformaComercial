{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"StompJs\", [], factory);else if (typeof exports === 'object') exports[\"StompJs\"] = factory();else root[\"StompJs\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n          return value[key];\n        }.bind(null, key));\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 0);\n      /******/\n    }\n    /************************************************************************/\n\n    /******/\n    ({\n      /***/\n      \"./src/byte.ts\":\n      /*!*********************!*\\\n        !*** ./src/byte.ts ***!\n        \\*********************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcByteTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        /**\n         * Some byte values, used as per STOMP specifications.\n         *\n         * Part of `@stomp/stompjs`.\n         *\n         * @internal\n         */\n\n        exports.BYTE = {\n          // LINEFEED byte (octet 10)\n          LF: '\\x0A',\n          // NULL byte (octet 0)\n          NULL: '\\x00'\n        };\n        /***/\n      },\n\n      /***/\n      \"./src/client.ts\":\n      /*!***********************!*\\\n        !*** ./src/client.ts ***!\n        \\***********************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcClientTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n\n        var __generator = this && this.__generator || function (thisArg, body) {\n          var _ = {\n            label: 0,\n            sent: function sent() {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          },\n              f,\n              y,\n              t,\n              g;\n          return g = {\n            next: verb(0),\n            \"throw\": verb(1),\n            \"return\": verb(2)\n          }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g;\n\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n\n            while (_) try {\n              if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n              if (y = 0, t) op = [op[0] & 2, t.value];\n\n              switch (op[0]) {\n                case 0:\n                case 1:\n                  t = op;\n                  break;\n\n                case 4:\n                  _.label++;\n                  return {\n                    value: op[1],\n                    done: false\n                  };\n\n                case 5:\n                  _.label++;\n                  y = op[1];\n                  op = [0];\n                  continue;\n\n                case 7:\n                  op = _.ops.pop();\n\n                  _.trys.pop();\n\n                  continue;\n\n                default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                    _ = 0;\n                    continue;\n                  }\n\n                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                    _.label = op[1];\n                    break;\n                  }\n\n                  if (op[0] === 6 && _.label < t[1]) {\n                    _.label = t[1];\n                    t = op;\n                    break;\n                  }\n\n                  if (t && _.label < t[2]) {\n                    _.label = t[2];\n\n                    _.ops.push(op);\n\n                    break;\n                  }\n\n                  if (t[2]) _.ops.pop();\n\n                  _.trys.pop();\n\n                  continue;\n              }\n\n              op = body.call(thisArg, _);\n            } catch (e) {\n              op = [6, e];\n              y = 0;\n            } finally {\n              f = t = 0;\n            }\n\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        };\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var stomp_handler_1 = __webpack_require__(\n        /*! ./stomp-handler */\n        \"./src/stomp-handler.ts\");\n\n        var versions_1 = __webpack_require__(\n        /*! ./versions */\n        \"./src/versions.ts\");\n\n        var web_socket_state_1 = __webpack_require__(\n        /*! ./web-socket-state */\n        \"./src/web-socket-state.ts\");\n        /**\n         * STOMP Client Class.\n         *\n         * Part of `@stomp/stompjs`.\n         */\n\n\n        var Client =\n        /** @class */\n        function () {\n          /**\n           * Create an instance.\n           */\n          function Client(conf) {\n            if (conf === void 0) {\n              conf = {};\n            }\n            /**\n             * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n             *\n             * Example:\n             * ```javascript\n             *        // Try only versions 1.0 and 1.1\n             *        client.stompVersions = new Versions(['1.0', '1.1'])\n             * ```\n             */\n\n\n            this.stompVersions = versions_1.Versions.default;\n            /**\n             *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n             */\n\n            this.reconnectDelay = 5000;\n            /**\n             * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n             */\n\n            this.heartbeatIncoming = 10000;\n            /**\n             * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n             */\n\n            this.heartbeatOutgoing = 10000;\n            /**\n             * This switches on a non standard behavior while sending WebSocket packets.\n             * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n             * Only Java Spring brokers seems to use this mode.\n             *\n             * WebSockets, by itself, split large (text) packets,\n             * so it is not needed with a truly compliant STOMP/WebSocket broker.\n             * Actually setting it for such broker will cause large messages to fail.\n             *\n             * `false` by default.\n             *\n             * Binary frames are never split.\n             */\n\n            this.splitLargeFrames = false;\n            /**\n             * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n             * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n             */\n\n            this.maxWebSocketChunkSize = 8 * 1024;\n            /**\n             * Usually the\n             * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n             * is automatically decided by type of the payload.\n             * Default is `false`, which should work with all compliant brokers.\n             *\n             * Set this flag to force binary frames.\n             */\n\n            this.forceBinaryWSFrames = false;\n            /**\n             * A bug in ReactNative chops a string on occurrence of a NULL.\n             * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n             * This makes incoming WebSocket messages invalid STOMP packets.\n             * Setting this flag attempts to reverse the damage by appending a NULL.\n             * If the broker splits a large message into multiple WebSocket messages,\n             * this flag will cause data loss and abnormal termination of connection.\n             *\n             * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n             */\n\n            this.appendMissingNULLonIncoming = false;\n            this._active = false; // Dummy callbacks\n\n            var noOp = function noOp() {};\n\n            this.debug = noOp;\n            this.beforeConnect = noOp;\n            this.onConnect = noOp;\n            this.onDisconnect = noOp;\n            this.onUnhandledMessage = noOp;\n            this.onUnhandledReceipt = noOp;\n            this.onUnhandledFrame = noOp;\n            this.onStompError = noOp;\n            this.onWebSocketClose = noOp;\n            this.onWebSocketError = noOp;\n            this.logRawCommunication = false; // These parameters would typically get proper values before connect is called\n\n            this.connectHeaders = {};\n            this._disconnectHeaders = {}; // Apply configuration\n\n            this.configure(conf);\n          }\n\n          Object.defineProperty(Client.prototype, \"webSocket\", {\n            /**\n             * Underlying WebSocket instance, READONLY.\n             */\n            get: function get() {\n              return this._webSocket;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(Client.prototype, \"disconnectHeaders\", {\n            /**\n             * Disconnection headers.\n             */\n            get: function get() {\n              return this._disconnectHeaders;\n            },\n            set: function set(value) {\n              this._disconnectHeaders = value;\n\n              if (this._stompHandler) {\n                this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n              }\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(Client.prototype, \"connected\", {\n            /**\n             * `true` if there is a active connection with STOMP Broker\n             */\n            get: function get() {\n              return !!this._stompHandler && this._stompHandler.connected;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(Client.prototype, \"connectedVersion\", {\n            /**\n             * version of STOMP protocol negotiated with the server, READONLY\n             */\n            get: function get() {\n              return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(Client.prototype, \"active\", {\n            /**\n             * if the client is active (connected or going to reconnect)\n             */\n            get: function get() {\n              return this._active;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          /**\n           * Update configuration.\n           */\n\n          Client.prototype.configure = function (conf) {\n            // bulk assign all properties to this\n            Object.assign(this, conf);\n          };\n          /**\n           * Initiate the connection with the broker.\n           * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n           * it will keep trying to reconnect.\n           *\n           * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n           */\n\n\n          Client.prototype.activate = function () {\n            this._active = true;\n\n            this._connect();\n          };\n\n          Client.prototype._connect = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var _this = this;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (this.connected) {\n                      this.debug('STOMP: already connected, nothing to do');\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.beforeConnect()];\n\n                  case 1:\n                    _a.sent();\n\n                    if (!this._active) {\n                      this.debug('Client has been marked inactive, will not attempt to connect');\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    this.debug('Opening Web Socket...'); // Get the actual WebSocket (or a similar object)\n\n                    this._webSocket = this._createWebSocket();\n                    this._stompHandler = new stomp_handler_1.StompHandler(this, this._webSocket, {\n                      debug: this.debug,\n                      stompVersions: this.stompVersions,\n                      connectHeaders: this.connectHeaders,\n                      disconnectHeaders: this._disconnectHeaders,\n                      heartbeatIncoming: this.heartbeatIncoming,\n                      heartbeatOutgoing: this.heartbeatOutgoing,\n                      splitLargeFrames: this.splitLargeFrames,\n                      maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n                      forceBinaryWSFrames: this.forceBinaryWSFrames,\n                      logRawCommunication: this.logRawCommunication,\n                      appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n                      onConnect: function onConnect(frame) {\n                        if (!_this._active) {\n                          _this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n\n                          _this._disposeStompHandler();\n\n                          return;\n                        }\n\n                        _this.onConnect(frame);\n                      },\n                      onDisconnect: function onDisconnect(frame) {\n                        _this.onDisconnect(frame);\n                      },\n                      onStompError: function onStompError(frame) {\n                        _this.onStompError(frame);\n                      },\n                      onWebSocketClose: function onWebSocketClose(evt) {\n                        _this.onWebSocketClose(evt); // The callback is called before attempting to reconnect, this would allow the client\n                        // to be `deactivated` in the callback.\n\n\n                        if (_this._active) {\n                          _this._schedule_reconnect();\n                        }\n                      },\n                      onWebSocketError: function onWebSocketError(evt) {\n                        _this.onWebSocketError(evt);\n                      },\n                      onUnhandledMessage: function onUnhandledMessage(message) {\n                        _this.onUnhandledMessage(message);\n                      },\n                      onUnhandledReceipt: function onUnhandledReceipt(frame) {\n                        _this.onUnhandledReceipt(frame);\n                      },\n                      onUnhandledFrame: function onUnhandledFrame(frame) {\n                        _this.onUnhandledFrame(frame);\n                      }\n                    });\n\n                    this._stompHandler.start();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          };\n\n          Client.prototype._createWebSocket = function () {\n            var webSocket;\n\n            if (this.webSocketFactory) {\n              webSocket = this.webSocketFactory();\n            } else {\n              webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n            }\n\n            webSocket.binaryType = 'arraybuffer';\n            return webSocket;\n          };\n\n          Client.prototype._schedule_reconnect = function () {\n            var _this = this;\n\n            if (this.reconnectDelay > 0) {\n              this.debug(\"STOMP: scheduling reconnection in \" + this.reconnectDelay + \"ms\");\n              this._reconnector = setTimeout(function () {\n                _this._connect();\n              }, this.reconnectDelay);\n            }\n          };\n          /**\n           * Disconnect if connected and stop auto reconnect loop.\n           * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n           *\n           * To reactivate you can call [Client#activate]{@link Client#activate}.\n           */\n\n\n          Client.prototype.deactivate = function () {\n            // indicate that auto reconnect loop should terminate\n            this._active = false; // Clear if a reconnection was scheduled\n\n            if (this._reconnector) {\n              clearTimeout(this._reconnector);\n            }\n\n            this._disposeStompHandler();\n          };\n          /**\n           * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n           * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n           * After forcing disconnect, automatic reconnect will be attempted.\n           * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n           */\n\n\n          Client.prototype.forceDisconnect = function () {\n            if (this._webSocket) {\n              if (this._webSocket.readyState === web_socket_state_1.WebSocketState.CONNECTING || this._webSocket.readyState === web_socket_state_1.WebSocketState.OPEN) {\n                this._stompHandler._closeWebsocket();\n              }\n            }\n          };\n\n          Client.prototype._disposeStompHandler = function () {\n            // Dispose STOMP Handler\n            if (this._stompHandler) {\n              this._stompHandler.dispose();\n\n              this._stompHandler = null;\n            }\n          };\n          /**\n           * Send a message to a named destination. Refer to your STOMP broker documentation for types\n           * and naming of destinations.\n           *\n           * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n           *\n           * `body` must be String.\n           * You will need to covert the payload to string in case it is not string (e.g. JSON).\n           *\n           * To send a binary message body use binaryBody parameter. It should be a\n           * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n           * Sometimes brokers may not support binary frames out of the box.\n           * Please check your broker documentation.\n           *\n           * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n           * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n           * For binary messages `content-length` header is always added.\n           *\n           * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n           * and `content-length` header is missing.\n           *\n           * ```javascript\n           *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n           *\n           *        // Only destination is mandatory parameter\n           *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n           *\n           *        // Skip content-length header in the frame to the broker\n           *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n           *\n           *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n           *        // setting content-type header is not mandatory, however a good practice\n           *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n           *                         headers: {'content-type': 'application/octet-stream'}});\n           * ```\n           */\n\n\n          Client.prototype.publish = function (params) {\n            this._stompHandler.publish(params);\n          };\n          /**\n           * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n           * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n           * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n           * random number or a combination may be used.\n           *\n           * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n           * The operation needs to be matched based in the value of the receipt-id.\n           *\n           * This method allow watching for a receipt and invoke the callback\n           * when corresponding receipt has been received.\n           *\n           * The actual {@link FrameImpl} will be passed as parameter to the callback.\n           *\n           * Example:\n           * ```javascript\n           *        // Subscribing with acknowledgement\n           *        let receiptId = randomText();\n           *\n           *        client.watchForReceipt(receiptId, function() {\n           *          // Will be called after server acknowledges\n           *        });\n           *\n           *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n           *\n           *\n           *        // Publishing with acknowledgement\n           *        receiptId = randomText();\n           *\n           *        client.watchForReceipt(receiptId, function() {\n           *          // Will be called after server acknowledges\n           *        });\n           *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n           * ```\n           */\n\n\n          Client.prototype.watchForReceipt = function (receiptId, callback) {\n            this._stompHandler.watchForReceipt(receiptId, callback);\n          };\n          /**\n           * Subscribe to a STOMP Broker location. The callback will be invoked for each received message with\n           * the {@link IMessage} as argument.\n           *\n           * Note: The library will generate an unique ID if there is none provided in the headers.\n           *       To use your own ID, pass it using the headers argument.\n           *\n           * ```javascript\n           *        callback = function(message) {\n           *        // called when the client receives a STOMP message from the server\n           *          if (message.body) {\n           *            alert(\"got message with body \" + message.body)\n           *          } else {\n           *            alert(\"got empty message\");\n           *          }\n           *        });\n           *\n           *        var subscription = client.subscribe(\"/queue/test\", callback);\n           *\n           *        // Explicit subscription id\n           *        var mySubId = 'my-subscription-id-001';\n           *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n           * ```\n           */\n\n\n          Client.prototype.subscribe = function (destination, callback, headers) {\n            if (headers === void 0) {\n              headers = {};\n            }\n\n            return this._stompHandler.subscribe(destination, callback, headers);\n          };\n          /**\n           * It is preferable to unsubscribe from a subscription by calling\n           * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n           *\n           * ```javascript\n           *        var subscription = client.subscribe(destination, onmessage);\n           *        // ...\n           *        subscription.unsubscribe();\n           * ```\n           *\n           * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n           */\n\n\n          Client.prototype.unsubscribe = function (id, headers) {\n            if (headers === void 0) {\n              headers = {};\n            }\n\n            this._stompHandler.unsubscribe(id, headers);\n          };\n          /**\n           * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n           * and [abort]{@link ITransaction#abort}.\n           *\n           * `transactionId` is optional, if not passed the library will generate it internally.\n           */\n\n\n          Client.prototype.begin = function (transactionId) {\n            return this._stompHandler.begin(transactionId);\n          };\n          /**\n           * Commit a transaction.\n           *\n           * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n           * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n           *\n           * ```javascript\n           *        var tx = client.begin(txId);\n           *        //...\n           *        tx.commit();\n           * ```\n           */\n\n\n          Client.prototype.commit = function (transactionId) {\n            this._stompHandler.commit(transactionId);\n          };\n          /**\n           * Abort a transaction.\n           * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n           * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n           *\n           * ```javascript\n           *        var tx = client.begin(txId);\n           *        //...\n           *        tx.abort();\n           * ```\n           */\n\n\n          Client.prototype.abort = function (transactionId) {\n            this._stompHandler.abort(transactionId);\n          };\n          /**\n           * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n           * on the {@link IMessage} handled by a subscription callback:\n           *\n           * ```javascript\n           *        var callback = function (message) {\n           *          // process the message\n           *          // acknowledge it\n           *          message.ack();\n           *        };\n           *        client.subscribe(destination, callback, {'ack': 'client'});\n           * ```\n           */\n\n\n          Client.prototype.ack = function (messageId, subscriptionId, headers) {\n            if (headers === void 0) {\n              headers = {};\n            }\n\n            this._stompHandler.ack(messageId, subscriptionId, headers);\n          };\n          /**\n           * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n           * on the {@link IMessage} handled by a subscription callback:\n           *\n           * ```javascript\n           *        var callback = function (message) {\n           *          // process the message\n           *          // an error occurs, nack it\n           *          message.nack();\n           *        };\n           *        client.subscribe(destination, callback, {'ack': 'client'});\n           * ```\n           */\n\n\n          Client.prototype.nack = function (messageId, subscriptionId, headers) {\n            if (headers === void 0) {\n              headers = {};\n            }\n\n            this._stompHandler.nack(messageId, subscriptionId, headers);\n          };\n\n          return Client;\n        }();\n\n        exports.Client = Client;\n        /***/\n      },\n\n      /***/\n      \"./src/compatibility/compat-client.ts\":\n      /*!********************************************!*\\\n        !*** ./src/compatibility/compat-client.ts ***!\n        \\********************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcCompatibilityCompatClientTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var __extends = this && this.__extends || function () {\n          var _extendStatics = function extendStatics(d, b) {\n            _extendStatics = Object.setPrototypeOf || {\n              __proto__: []\n            } instanceof Array && function (d, b) {\n              d.__proto__ = b;\n            } || function (d, b) {\n              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            };\n\n            return _extendStatics(d, b);\n          };\n\n          return function (d, b) {\n            _extendStatics(d, b);\n\n            function __() {\n              this.constructor = d;\n            }\n\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n          };\n        }();\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var client_1 = __webpack_require__(\n        /*! ../client */\n        \"./src/client.ts\");\n\n        var heartbeat_info_1 = __webpack_require__(\n        /*! ./heartbeat-info */\n        \"./src/compatibility/heartbeat-info.ts\");\n        /**\n         * Available for backward compatibility, please shift to using {@link Client}.\n         *\n         * **Deprecated**\n         *\n         * Part of `@stomp/stompjs`.\n         *\n         * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n         */\n\n\n        var CompatClient =\n        /** @class */\n        function (_super) {\n          __extends(CompatClient, _super);\n          /**\n           * Available for backward compatibility, please shift to using {@link Client}\n           * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n           *\n           * **Deprecated**\n           *\n           * @internal\n           */\n\n\n          function CompatClient(webSocketFactory) {\n            var _this = _super.call(this) || this;\n            /**\n             * It is no op now. No longer needed. Large packets work out of the box.\n             */\n\n\n            _this.maxWebSocketFrameSize = 16 * 1024;\n            _this._heartbeatInfo = new heartbeat_info_1.HeartbeatInfo(_this);\n            _this.reconnect_delay = 0;\n            _this.webSocketFactory = webSocketFactory; // Default from previous version\n\n            _this.debug = function () {\n              var message = [];\n\n              for (var _i = 0; _i < arguments.length; _i++) {\n                message[_i] = arguments[_i];\n              }\n\n              console.log.apply(console, message);\n            };\n\n            return _this;\n          }\n\n          CompatClient.prototype._parseConnect = function () {\n            var args = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n\n            var closeEventCallback;\n            var connectCallback;\n            var errorCallback;\n            var headers = {};\n\n            if (args.length < 2) {\n              throw new Error('Connect requires at least 2 arguments');\n            }\n\n            if (typeof args[1] === 'function') {\n              headers = args[0], connectCallback = args[1], errorCallback = args[2], closeEventCallback = args[3];\n            } else {\n              switch (args.length) {\n                case 6:\n                  headers.login = args[0], headers.passcode = args[1], connectCallback = args[2], errorCallback = args[3], closeEventCallback = args[4], headers.host = args[5];\n                  break;\n\n                default:\n                  headers.login = args[0], headers.passcode = args[1], connectCallback = args[2], errorCallback = args[3], closeEventCallback = args[4];\n              }\n            }\n\n            return [headers, connectCallback, errorCallback, closeEventCallback];\n          };\n          /**\n           * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n           *\n           * **Deprecated**\n           *\n           * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n           * version with headers to pass your broker specific options.\n           *\n           * overloads:\n           * - connect(headers, connectCallback)\n           * - connect(headers, connectCallback, errorCallback)\n           * - connect(login, passcode, connectCallback)\n           * - connect(login, passcode, connectCallback, errorCallback)\n           * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n           * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n           *\n           * params:\n           * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n           * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n           * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n           * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n           * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n           * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n           * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n           *\n           * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n           */\n\n\n          CompatClient.prototype.connect = function () {\n            var args = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n\n            var out = this._parseConnect.apply(this, args);\n\n            if (out[0]) {\n              this.connectHeaders = out[0];\n            }\n\n            if (out[1]) {\n              this.onConnect = out[1];\n            }\n\n            if (out[2]) {\n              this.onStompError = out[2];\n            }\n\n            if (out[3]) {\n              this.onWebSocketClose = out[3];\n            }\n\n            _super.prototype.activate.call(this);\n          };\n          /**\n           * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n           *\n           * **Deprecated**\n           *\n           * See:\n           * [Client#onDisconnect]{@link Client#onDisconnect}, and\n           * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n           *\n           * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n           */\n\n\n          CompatClient.prototype.disconnect = function (disconnectCallback, headers) {\n            if (headers === void 0) {\n              headers = {};\n            }\n\n            if (disconnectCallback) {\n              this.onDisconnect = disconnectCallback;\n            }\n\n            this.disconnectHeaders = headers;\n\n            _super.prototype.deactivate.call(this);\n          };\n          /**\n           * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n           *\n           * Send a message to a named destination. Refer to your STOMP broker documentation for types\n           * and naming of destinations. The headers will, typically, be available to the subscriber.\n           * However, there may be special purpose headers corresponding to your STOMP broker.\n           *\n           *  **Deprecated**, use [Client#publish]{@link Client#publish}\n           *\n           * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n           *\n           * ```javascript\n           *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n           *\n           *        // If you want to send a message with a body, you must also pass the headers argument.\n           *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n           * ```\n           *\n           * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n           */\n\n\n          CompatClient.prototype.send = function (destination, headers, body) {\n            if (headers === void 0) {\n              headers = {};\n            }\n\n            if (body === void 0) {\n              body = '';\n            }\n\n            headers = Object.assign({}, headers);\n            var skipContentLengthHeader = headers['content-length'] === false;\n\n            if (skipContentLengthHeader) {\n              delete headers['content-length'];\n            }\n\n            this.publish({\n              destination: destination,\n              headers: headers,\n              body: body,\n              skipContentLengthHeader: skipContentLengthHeader\n            });\n          };\n\n          Object.defineProperty(CompatClient.prototype, \"reconnect_delay\", {\n            /**\n             * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n             *\n             * **Deprecated**\n             */\n            set: function set(value) {\n              this.reconnectDelay = value;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(CompatClient.prototype, \"ws\", {\n            /**\n             * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n             *\n             * **Deprecated**\n             */\n            get: function get() {\n              return this._webSocket;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(CompatClient.prototype, \"version\", {\n            /**\n             * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n             *\n             * **Deprecated**\n             */\n            get: function get() {\n              return this.connectedVersion;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(CompatClient.prototype, \"onreceive\", {\n            /**\n             * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n             *\n             * **Deprecated**\n             */\n            get: function get() {\n              return this.onUnhandledMessage;\n            },\n\n            /**\n             * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n             *\n             * **Deprecated**\n             */\n            set: function set(value) {\n              this.onUnhandledMessage = value;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(CompatClient.prototype, \"onreceipt\", {\n            /**\n             * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n             * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n             *\n             * **Deprecated**\n             */\n            get: function get() {\n              return this.onUnhandledReceipt;\n            },\n\n            /**\n             * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n             *\n             * **Deprecated**\n             */\n            set: function set(value) {\n              this.onUnhandledReceipt = value;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(CompatClient.prototype, \"heartbeat\", {\n            /**\n             * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n             * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n             *\n             * **Deprecated**\n             */\n            get: function get() {\n              return this._heartbeatInfo;\n            },\n\n            /**\n             * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n             * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n             *\n             * **Deprecated**\n             */\n            set: function set(value) {\n              this.heartbeatIncoming = value.incoming;\n              this.heartbeatOutgoing = value.outgoing;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          return CompatClient;\n        }(client_1.Client);\n\n        exports.CompatClient = CompatClient;\n        /***/\n      },\n\n      /***/\n      \"./src/compatibility/heartbeat-info.ts\":\n      /*!*********************************************!*\\\n        !*** ./src/compatibility/heartbeat-info.ts ***!\n        \\*********************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcCompatibilityHeartbeatInfoTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        /**\n         * Part of `@stomp/stompjs`.\n         *\n         * @internal\n         */\n\n        var HeartbeatInfo =\n        /** @class */\n        function () {\n          function HeartbeatInfo(client) {\n            this.client = client;\n          }\n\n          Object.defineProperty(HeartbeatInfo.prototype, \"outgoing\", {\n            get: function get() {\n              return this.client.heartbeatOutgoing;\n            },\n            set: function set(value) {\n              this.client.heartbeatOutgoing = value;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(HeartbeatInfo.prototype, \"incoming\", {\n            get: function get() {\n              return this.client.heartbeatIncoming;\n            },\n            set: function set(value) {\n              this.client.heartbeatIncoming = value;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          return HeartbeatInfo;\n        }();\n\n        exports.HeartbeatInfo = HeartbeatInfo;\n        /***/\n      },\n\n      /***/\n      \"./src/compatibility/stomp.ts\":\n      /*!************************************!*\\\n        !*** ./src/compatibility/stomp.ts ***!\n        \\************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcCompatibilityStompTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var versions_1 = __webpack_require__(\n        /*! ../versions */\n        \"./src/versions.ts\");\n\n        var compat_client_1 = __webpack_require__(\n        /*! ./compat-client */\n        \"./src/compatibility/compat-client.ts\");\n        /**\n         * STOMP Class, acts like a factory to create {@link Client}.\n         *\n         * Part of `@stomp/stompjs`.\n         *\n         * **Deprecated**\n         *\n         * It will be removed in next major version. Please switch to {@link Client}.\n         */\n\n\n        var Stomp =\n        /** @class */\n        function () {\n          function Stomp() {}\n          /**\n           * This method creates a WebSocket client that is connected to\n           * the STOMP server located at the url.\n           *\n           * ```javascript\n           *        var url = \"ws://localhost:61614/stomp\";\n           *        var client = Stomp.client(url);\n           * ```\n           *\n           * **Deprecated**\n           *\n           * It will be removed in next major version. Please switch to {@link Client}\n           * using [Client#brokerURL]{@link Client#brokerURL}.\n           */\n\n\n          Stomp.client = function (url, protocols) {\n            // This is a hack to allow another implementation than the standard\n            // HTML5 WebSocket class.\n            //\n            // It is possible to use another class by calling\n            //\n            //     Stomp.WebSocketClass = MozWebSocket\n            //\n            // *prior* to call `Stomp.client()`.\n            //\n            // This hack is deprecated and `Stomp.over()` method should be used\n            // instead.\n            // See remarks on the function Stomp.over\n            if (protocols == null) {\n              protocols = versions_1.Versions.default.protocolVersions();\n            }\n\n            var wsFn = function wsFn() {\n              var klass = Stomp.WebSocketClass || WebSocket;\n              return new klass(url, protocols);\n            };\n\n            return new compat_client_1.CompatClient(wsFn);\n          };\n          /**\n           * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n           * specify the WebSocket to use (either a standard HTML5 WebSocket or\n           * a similar object).\n           *\n           * In order to support reconnection, the function Client._connect should be callable more than once.\n           * While reconnecting\n           * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n           * alternatively allows passing a function that should return a new instance of the underlying socket.\n           *\n           * ```javascript\n           *        var client = Stomp.over(function(){\n           *          return new WebSocket('ws://localhost:15674/ws')\n           *        });\n           * ```\n           *\n           * **Deprecated**\n           *\n           * It will be removed in next major version. Please switch to {@link Client}\n           * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n           */\n\n\n          Stomp.over = function (ws) {\n            var wsFn;\n\n            if (typeof ws === 'function') {\n              wsFn = ws;\n            } else {\n              console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' + 'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n\n              wsFn = function wsFn() {\n                return ws;\n              };\n            }\n\n            return new compat_client_1.CompatClient(wsFn);\n          };\n          /**\n           * In case you need to use a non standard class for WebSocket.\n           *\n           * For example when using within NodeJS environment:\n           *\n           * ```javascript\n           *        StompJs = require('../../esm5/');\n           *        Stomp = StompJs.Stomp;\n           *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n           * ```\n           *\n           * **Deprecated**\n           *\n           *\n           * It will be removed in next major version. Please switch to {@link Client}\n           * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n           */\n          // tslint:disable-next-line:variable-name\n\n\n          Stomp.WebSocketClass = null;\n          return Stomp;\n        }();\n\n        exports.Stomp = Stomp;\n        /***/\n      },\n\n      /***/\n      \"./src/frame-impl.ts\":\n      /*!***************************!*\\\n        !*** ./src/frame-impl.ts ***!\n        \\***************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcFrameImplTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var byte_1 = __webpack_require__(\n        /*! ./byte */\n        \"./src/byte.ts\");\n        /**\n         * Frame class represents a STOMP frame.\n         *\n         * @internal\n         */\n\n\n        var FrameImpl =\n        /** @class */\n        function () {\n          /**\n           * Frame constructor. `command`, `headers` and `body` are available as properties.\n           *\n           * @internal\n           */\n          function FrameImpl(params) {\n            var command = params.command,\n                headers = params.headers,\n                body = params.body,\n                binaryBody = params.binaryBody,\n                escapeHeaderValues = params.escapeHeaderValues,\n                skipContentLengthHeader = params.skipContentLengthHeader;\n            this.command = command;\n            this.headers = Object.assign({}, headers || {});\n\n            if (binaryBody) {\n              this._binaryBody = binaryBody;\n              this.isBinaryBody = true;\n            } else {\n              this._body = body || '';\n              this.isBinaryBody = false;\n            }\n\n            this.escapeHeaderValues = escapeHeaderValues || false;\n            this.skipContentLengthHeader = skipContentLengthHeader || false;\n          }\n\n          Object.defineProperty(FrameImpl.prototype, \"body\", {\n            /**\n             * body of the frame\n             */\n            get: function get() {\n              if (!this._body && this.isBinaryBody) {\n                this._body = new TextDecoder().decode(this._binaryBody);\n              }\n\n              return this._body;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(FrameImpl.prototype, \"binaryBody\", {\n            /**\n             * body as Uint8Array\n             */\n            get: function get() {\n              if (!this._binaryBody && !this.isBinaryBody) {\n                this._binaryBody = new TextEncoder().encode(this._body);\n              }\n\n              return this._binaryBody;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          /**\n           * deserialize a STOMP Frame from raw data.\n           *\n           * @internal\n           */\n\n          FrameImpl.fromRawFrame = function (rawFrame, escapeHeaderValues) {\n            var headers = {};\n\n            var trim = function trim(str) {\n              return str.replace(/^\\s+|\\s+$/g, '');\n            }; // In case of repeated headers, as per standards, first value need to be used\n\n\n            for (var _i = 0, _a = rawFrame.headers.reverse(); _i < _a.length; _i++) {\n              var header = _a[_i];\n              var idx = header.indexOf(':');\n              var key = trim(header[0]);\n              var value = trim(header[1]);\n\n              if (escapeHeaderValues && rawFrame.command !== 'CONNECT' && rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n              }\n\n              headers[key] = value;\n            }\n\n            return new FrameImpl({\n              command: rawFrame.command,\n              headers: headers,\n              binaryBody: rawFrame.binaryBody,\n              escapeHeaderValues: escapeHeaderValues\n            });\n          };\n          /**\n           * @internal\n           */\n\n\n          FrameImpl.prototype.toString = function () {\n            return this.serializeCmdAndHeaders();\n          };\n          /**\n           * serialize this Frame in a format suitable to be passed to WebSocket.\n           * If the body is string the output will be string.\n           * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n           *\n           * @internal\n           */\n\n\n          FrameImpl.prototype.serialize = function () {\n            var cmdAndHeaders = this.serializeCmdAndHeaders();\n\n            if (this.isBinaryBody) {\n              return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n            } else {\n              return cmdAndHeaders + this._body + byte_1.BYTE.NULL;\n            }\n          };\n\n          FrameImpl.prototype.serializeCmdAndHeaders = function () {\n            var lines = [this.command];\n\n            if (this.skipContentLengthHeader) {\n              delete this.headers['content-length'];\n            }\n\n            for (var _i = 0, _a = Object.keys(this.headers || {}); _i < _a.length; _i++) {\n              var name_1 = _a[_i];\n              var value = this.headers[name_1];\n\n              if (this.escapeHeaderValues && this.command !== 'CONNECT' && this.command !== 'CONNECTED') {\n                lines.push(name_1 + \":\" + FrameImpl.hdrValueEscape(\"\" + value));\n              } else {\n                lines.push(name_1 + \":\" + value);\n              }\n            }\n\n            if (this.isBinaryBody || !this.isBodyEmpty() && !this.skipContentLengthHeader) {\n              lines.push(\"content-length:\" + this.bodyLength());\n            }\n\n            return lines.join(byte_1.BYTE.LF) + byte_1.BYTE.LF + byte_1.BYTE.LF;\n          };\n\n          FrameImpl.prototype.isBodyEmpty = function () {\n            return this.bodyLength() === 0;\n          };\n\n          FrameImpl.prototype.bodyLength = function () {\n            var binaryBody = this.binaryBody;\n            return binaryBody ? binaryBody.length : 0;\n          };\n          /**\n           * Compute the size of a UTF-8 string by counting its number of bytes\n           * (and not the number of characters composing the string)\n           */\n\n\n          FrameImpl.sizeOfUTF8 = function (s) {\n            return s ? new TextEncoder().encode(s).length : 0;\n          };\n\n          FrameImpl.toUnit8Array = function (cmdAndHeaders, binaryBody) {\n            var uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n            var nullTerminator = new Uint8Array([0]);\n            var uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n            uint8Frame.set(uint8CmdAndHeaders);\n            uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n            uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n            return uint8Frame;\n          };\n          /**\n           * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n           *\n           * @internal\n           */\n\n\n          FrameImpl.marshall = function (params) {\n            var frame = new FrameImpl(params);\n            return frame.serialize();\n          };\n          /**\n           *  Escape header values\n           */\n\n\n          FrameImpl.hdrValueEscape = function (str) {\n            return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n          };\n          /**\n           * UnEscape header values\n           */\n\n\n          FrameImpl.hdrValueUnEscape = function (str) {\n            return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n          };\n\n          return FrameImpl;\n        }();\n\n        exports.FrameImpl = FrameImpl;\n        /***/\n      },\n\n      /***/\n      \"./src/index.ts\":\n      /*!**********************!*\\\n        !*** ./src/index.ts ***!\n        \\**********************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcIndexTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        function __export(m) {\n          for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        __export(__webpack_require__(\n        /*! ./client */\n        \"./src/client.ts\"));\n\n        __export(__webpack_require__(\n        /*! ./frame-impl */\n        \"./src/frame-impl.ts\"));\n\n        __export(__webpack_require__(\n        /*! ./parser */\n        \"./src/parser.ts\"));\n\n        __export(__webpack_require__(\n        /*! ./stomp-config */\n        \"./src/stomp-config.ts\"));\n\n        __export(__webpack_require__(\n        /*! ./stomp-headers */\n        \"./src/stomp-headers.ts\"));\n\n        __export(__webpack_require__(\n        /*! ./stomp-subscription */\n        \"./src/stomp-subscription.ts\"));\n\n        __export(__webpack_require__(\n        /*! ./versions */\n        \"./src/versions.ts\"));\n\n        __export(__webpack_require__(\n        /*! ./web-socket-state */\n        \"./src/web-socket-state.ts\")); // Compatibility code\n\n\n        __export(__webpack_require__(\n        /*! ./compatibility/compat-client */\n        \"./src/compatibility/compat-client.ts\"));\n\n        __export(__webpack_require__(\n        /*! ./compatibility/stomp */\n        \"./src/compatibility/stomp.ts\"));\n        /***/\n\n      },\n\n      /***/\n      \"./src/parser.ts\":\n      /*!***********************!*\\\n        !*** ./src/parser.ts ***!\n        \\***********************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcParserTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        /**\n         * @internal\n         */\n\n        var NULL = 0;\n        /**\n         * @internal\n         */\n\n        var LF = 10;\n        /**\n         * @internal\n         */\n\n        var CR = 13;\n        /**\n         * @internal\n         */\n\n        var COLON = 58;\n        /**\n         * This is an evented, rec descent parser.\n         * A stream of Octets can be passed and whenever it recognizes\n         * a complete Frame or an incoming ping it will invoke the registered callbacks.\n         *\n         * All incoming Octets are fed into _onByte function.\n         * Depending on current state the _onByte function keeps changing.\n         * Depending on the state it keeps accumulating into _token and _results.\n         * State is indicated by current value of _onByte, all states are named as _collect.\n         *\n         * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n         * imply that all lengths are considered in bytes (instead of string lengths).\n         * So, before actual parsing, if the incoming data is String it is converted to Octets.\n         * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n         *\n         * There is no peek function on the incoming data.\n         * When a state change occurs based on an Octet without consuming the Octet,\n         * the Octet, after state change, is fed again (_reinjectByte).\n         * This became possible as the state change can be determined by inspecting just one Octet.\n         *\n         * There are two modes to collect the body, if content-length header is there then it by counting Octets\n         * otherwise it is determined by NULL terminator.\n         *\n         * Following the standards, the command and headers are converted to Strings\n         * and the body is returned as Octets.\n         * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n         *\n         * This parser does not use Regular Expressions as that can only operate on Strings.\n         *\n         * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n         * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n         * is pushed.\n         *\n         * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n         * (which is protocol version specific), and convert body to text.\n         *\n         * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n         *\n         * Part of `@stomp/stompjs`.\n         *\n         * @internal\n         */\n\n        var Parser =\n        /** @class */\n        function () {\n          function Parser(onFrame, onIncomingPing) {\n            this.onFrame = onFrame;\n            this.onIncomingPing = onIncomingPing;\n            this._encoder = new TextEncoder();\n            this._decoder = new TextDecoder();\n            this._token = [];\n\n            this._initState();\n          }\n\n          Parser.prototype.parseChunk = function (segment, appendMissingNULLonIncoming) {\n            if (appendMissingNULLonIncoming === void 0) {\n              appendMissingNULLonIncoming = false;\n            }\n\n            var chunk;\n\n            if (segment instanceof ArrayBuffer) {\n              chunk = new Uint8Array(segment);\n            } else {\n              chunk = this._encoder.encode(segment);\n            } // See https://github.com/stomp-js/stompjs/issues/89\n            // Remove when underlying issue is fixed.\n            //\n            // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n\n\n            if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n              var chunkWithNull = new Uint8Array(chunk.length + 1);\n              chunkWithNull.set(chunk, 0);\n              chunkWithNull[chunk.length] = 0;\n              chunk = chunkWithNull;\n            } // tslint:disable-next-line:prefer-for-of\n\n\n            for (var i = 0; i < chunk.length; i++) {\n              var byte = chunk[i];\n\n              this._onByte(byte);\n            }\n          }; // The following implements a simple Rec Descent Parser.\n          // The grammar is simple and just one byte tells what should be the next state\n\n\n          Parser.prototype._collectFrame = function (byte) {\n            if (byte === NULL) {\n              // Ignore\n              return;\n            }\n\n            if (byte === CR) {\n              // Ignore CR\n              return;\n            }\n\n            if (byte === LF) {\n              // Incoming Ping\n              this.onIncomingPing();\n              return;\n            }\n\n            this._onByte = this._collectCommand;\n\n            this._reinjectByte(byte);\n          };\n\n          Parser.prototype._collectCommand = function (byte) {\n            if (byte === CR) {\n              // Ignore CR\n              return;\n            }\n\n            if (byte === LF) {\n              this._results.command = this._consumeTokenAsUTF8();\n              this._onByte = this._collectHeaders;\n              return;\n            }\n\n            this._consumeByte(byte);\n          };\n\n          Parser.prototype._collectHeaders = function (byte) {\n            if (byte === CR) {\n              // Ignore CR\n              return;\n            }\n\n            if (byte === LF) {\n              this._setupCollectBody();\n\n              return;\n            }\n\n            this._onByte = this._collectHeaderKey;\n\n            this._reinjectByte(byte);\n          };\n\n          Parser.prototype._reinjectByte = function (byte) {\n            this._onByte(byte);\n          };\n\n          Parser.prototype._collectHeaderKey = function (byte) {\n            if (byte === COLON) {\n              this._headerKey = this._consumeTokenAsUTF8();\n              this._onByte = this._collectHeaderValue;\n              return;\n            }\n\n            this._consumeByte(byte);\n          };\n\n          Parser.prototype._collectHeaderValue = function (byte) {\n            if (byte === CR) {\n              // Ignore CR\n              return;\n            }\n\n            if (byte === LF) {\n              this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n\n              this._headerKey = undefined;\n              this._onByte = this._collectHeaders;\n              return;\n            }\n\n            this._consumeByte(byte);\n          };\n\n          Parser.prototype._setupCollectBody = function () {\n            var contentLengthHeader = this._results.headers.filter(function (header) {\n              return header[0] === 'content-length';\n            })[0];\n\n            if (contentLengthHeader) {\n              this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n              this._onByte = this._collectBodyFixedSize;\n            } else {\n              this._onByte = this._collectBodyNullTerminated;\n            }\n          };\n\n          Parser.prototype._collectBodyNullTerminated = function (byte) {\n            if (byte === NULL) {\n              this._retrievedBody();\n\n              return;\n            }\n\n            this._consumeByte(byte);\n          };\n\n          Parser.prototype._collectBodyFixedSize = function (byte) {\n            // It is post decrement, so that we discard the trailing NULL octet\n            if (this._bodyBytesRemaining-- === 0) {\n              this._retrievedBody();\n\n              return;\n            }\n\n            this._consumeByte(byte);\n          };\n\n          Parser.prototype._retrievedBody = function () {\n            this._results.binaryBody = this._consumeTokenAsRaw();\n            this.onFrame(this._results);\n\n            this._initState();\n          }; // Rec Descent Parser helpers\n\n\n          Parser.prototype._consumeByte = function (byte) {\n            this._token.push(byte);\n          };\n\n          Parser.prototype._consumeTokenAsUTF8 = function () {\n            return this._decoder.decode(this._consumeTokenAsRaw());\n          };\n\n          Parser.prototype._consumeTokenAsRaw = function () {\n            var rawResult = new Uint8Array(this._token);\n            this._token = [];\n            return rawResult;\n          };\n\n          Parser.prototype._initState = function () {\n            this._results = {\n              command: undefined,\n              headers: [],\n              binaryBody: undefined\n            };\n            this._token = [];\n            this._headerKey = undefined;\n            this._onByte = this._collectFrame;\n          };\n\n          return Parser;\n        }();\n\n        exports.Parser = Parser;\n        /***/\n      },\n\n      /***/\n      \"./src/stomp-config.ts\":\n      /*!*****************************!*\\\n        !*** ./src/stomp-config.ts ***!\n        \\*****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcStompConfigTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        /**\n         * Configuration options for STOMP Client, each key corresponds to\n         * field by the same name in {@link Client}. This can be passed to\n         * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n         *\n         * Part of `@stomp/stompjs`.\n         */\n\n        var StompConfig =\n        /** @class */\n        function () {\n          function StompConfig() {}\n\n          return StompConfig;\n        }();\n\n        exports.StompConfig = StompConfig;\n        /***/\n      },\n\n      /***/\n      \"./src/stomp-handler.ts\":\n      /*!******************************!*\\\n        !*** ./src/stomp-handler.ts ***!\n        \\******************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcStompHandlerTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var byte_1 = __webpack_require__(\n        /*! ./byte */\n        \"./src/byte.ts\");\n\n        var frame_impl_1 = __webpack_require__(\n        /*! ./frame-impl */\n        \"./src/frame-impl.ts\");\n\n        var parser_1 = __webpack_require__(\n        /*! ./parser */\n        \"./src/parser.ts\");\n\n        var versions_1 = __webpack_require__(\n        /*! ./versions */\n        \"./src/versions.ts\");\n\n        var web_socket_state_1 = __webpack_require__(\n        /*! ./web-socket-state */\n        \"./src/web-socket-state.ts\");\n        /**\n         * The STOMP protocol handler\n         *\n         * Part of `@stomp/stompjs`.\n         *\n         * @internal\n         */\n\n\n        var StompHandler =\n        /** @class */\n        function () {\n          function StompHandler(_client, _webSocket, config) {\n            var _this = this;\n\n            if (config === void 0) {\n              config = {};\n            }\n\n            this._client = _client;\n            this._webSocket = _webSocket;\n            this._serverFrameHandlers = {\n              // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n              CONNECTED: function CONNECTED(frame) {\n                _this.debug(\"connected to server \" + frame.headers.server);\n\n                _this._connected = true;\n                _this._connectedVersion = frame.headers.version; // STOMP version 1.2 needs header values to be escaped\n\n                if (_this._connectedVersion === versions_1.Versions.V1_2) {\n                  _this._escapeHeaderValues = true;\n                }\n\n                _this._setupHeartbeat(frame.headers);\n\n                _this.onConnect(frame);\n              },\n              // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n              MESSAGE: function MESSAGE(frame) {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](http://www.rabbitmq.com/stomp.html)).\n                var subscription = frame.headers.subscription;\n                var onReceive = _this._subscriptions[subscription] || _this.onUnhandledMessage; // bless the frame to be a Message\n\n                var message = frame;\n                var client = _this;\n                var messageId = _this._connectedVersion === versions_1.Versions.V1_2 ? message.headers.ack : message.headers['message-id']; // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n\n                message.ack = function (headers) {\n                  if (headers === void 0) {\n                    headers = {};\n                  }\n\n                  return client.ack(messageId, subscription, headers);\n                };\n\n                message.nack = function (headers) {\n                  if (headers === void 0) {\n                    headers = {};\n                  }\n\n                  return client.nack(messageId, subscription, headers);\n                };\n\n                onReceive(message);\n              },\n              // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n              RECEIPT: function RECEIPT(frame) {\n                var callback = _this._receiptWatchers[frame.headers['receipt-id']];\n\n                if (callback) {\n                  callback(frame); // Server will acknowledge only once, remove the callback\n\n                  delete _this._receiptWatchers[frame.headers['receipt-id']];\n                } else {\n                  _this.onUnhandledReceipt(frame);\n                }\n              },\n              // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n              ERROR: function ERROR(frame) {\n                _this.onStompError(frame);\n              }\n            }; // used to index subscribers\n\n            this._counter = 0; // subscription callbacks indexed by subscriber's ID\n\n            this._subscriptions = {}; // receipt-watchers indexed by receipts-ids\n\n            this._receiptWatchers = {};\n            this._partialData = '';\n            this._escapeHeaderValues = false;\n            this._lastServerActivityTS = Date.now();\n            this.configure(config);\n          }\n\n          Object.defineProperty(StompHandler.prototype, \"connectedVersion\", {\n            get: function get() {\n              return this._connectedVersion;\n            },\n            enumerable: true,\n            configurable: true\n          });\n          Object.defineProperty(StompHandler.prototype, \"connected\", {\n            get: function get() {\n              return this._connected;\n            },\n            enumerable: true,\n            configurable: true\n          });\n\n          StompHandler.prototype.configure = function (conf) {\n            // bulk assign all properties to this\n            Object.assign(this, conf);\n          };\n\n          StompHandler.prototype.start = function () {\n            var _this = this;\n\n            var parser = new parser_1.Parser( // On Frame\n            function (rawFrame) {\n              var frame = frame_impl_1.FrameImpl.fromRawFrame(rawFrame, _this._escapeHeaderValues); // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n\n              if (!_this.logRawCommunication) {\n                _this.debug(\"<<< \" + frame);\n              }\n\n              var serverFrameHandler = _this._serverFrameHandlers[frame.command] || _this.onUnhandledFrame;\n              serverFrameHandler(frame);\n            }, // On Incoming Ping\n            function () {\n              _this.debug('<<< PONG');\n            });\n\n            this._webSocket.onmessage = function (evt) {\n              _this.debug('Received data');\n\n              _this._lastServerActivityTS = Date.now();\n\n              if (_this.logRawCommunication) {\n                var rawChunkAsString = evt.data instanceof ArrayBuffer ? new TextDecoder().decode(evt.data) : evt.data;\n\n                _this.debug(\"<<< \" + rawChunkAsString);\n              }\n\n              parser.parseChunk(evt.data, _this.appendMissingNULLonIncoming);\n            };\n\n            this._webSocket.onclose = function (closeEvent) {\n              _this.debug(\"Connection closed to \" + _this._webSocket.url);\n\n              _this.onWebSocketClose(closeEvent);\n\n              _this._cleanUp();\n            };\n\n            this._webSocket.onerror = function (errorEvent) {\n              _this.onWebSocketError(errorEvent);\n            };\n\n            this._webSocket.onopen = function () {\n              // Clone before updating\n              var connectHeaders = Object.assign({}, _this.connectHeaders);\n\n              _this.debug('Web Socket Opened...');\n\n              connectHeaders['accept-version'] = _this.stompVersions.supportedVersions();\n              connectHeaders['heart-beat'] = [_this.heartbeatOutgoing, _this.heartbeatIncoming].join(',');\n\n              _this._transmit({\n                command: 'CONNECT',\n                headers: connectHeaders\n              });\n            };\n          };\n\n          StompHandler.prototype._setupHeartbeat = function (headers) {\n            var _this = this;\n\n            if (headers.version !== versions_1.Versions.V1_1 && headers.version !== versions_1.Versions.V1_2) {\n              return;\n            } // It is valid for the server to not send this header\n            // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n\n\n            if (!headers['heart-beat']) {\n              return;\n            } // heart-beat header received from the server looks like:\n            //\n            //     heart-beat: sx, sy\n\n\n            var _a = headers['heart-beat'].split(',').map(function (v) {\n              return parseInt(v, 10);\n            }),\n                serverOutgoing = _a[0],\n                serverIncoming = _a[1];\n\n            if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n              var ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n              this.debug(\"send PING every \" + ttl + \"ms\");\n              this._pinger = setInterval(function () {\n                if (_this._webSocket.readyState === web_socket_state_1.WebSocketState.OPEN) {\n                  _this._webSocket.send(byte_1.BYTE.LF);\n\n                  _this.debug('>>> PING');\n                }\n              }, ttl);\n            }\n\n            if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n              var ttl_1 = Math.max(this.heartbeatIncoming, serverOutgoing);\n              this.debug(\"check PONG every \" + ttl_1 + \"ms\");\n              this._ponger = setInterval(function () {\n                var delta = Date.now() - _this._lastServerActivityTS; // We wait twice the TTL to be flexible on window's setInterval calls\n\n\n                if (delta > ttl_1 * 2) {\n                  _this.debug(\"did not receive server activity for the last \" + delta + \"ms\");\n\n                  _this._closeWebsocket();\n                }\n              }, ttl_1);\n            }\n          };\n\n          StompHandler.prototype._closeWebsocket = function () {\n            this._webSocket.onmessage = function () {}; // ignore messages\n\n\n            this._webSocket.close();\n          };\n\n          StompHandler.prototype._transmit = function (params) {\n            var command = params.command,\n                headers = params.headers,\n                body = params.body,\n                binaryBody = params.binaryBody,\n                skipContentLengthHeader = params.skipContentLengthHeader;\n            var frame = new frame_impl_1.FrameImpl({\n              command: command,\n              headers: headers,\n              body: body,\n              binaryBody: binaryBody,\n              escapeHeaderValues: this._escapeHeaderValues,\n              skipContentLengthHeader: skipContentLengthHeader\n            });\n            var rawChunk = frame.serialize();\n\n            if (this.logRawCommunication) {\n              this.debug(\">>> \" + rawChunk);\n            } else {\n              this.debug(\">>> \" + frame);\n            }\n\n            if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n              rawChunk = new TextEncoder().encode(rawChunk);\n            }\n\n            if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n              this._webSocket.send(rawChunk);\n            } else {\n              var out = rawChunk;\n\n              while (out.length > 0) {\n                var chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n\n                this._webSocket.send(chunk);\n\n                this.debug(\"chunk sent = \" + chunk.length + \", remaining = \" + out.length);\n              }\n            }\n          };\n\n          StompHandler.prototype.dispose = function () {\n            var _this = this;\n\n            if (this.connected) {\n              try {\n                // clone before updating\n                var disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n\n                if (!disconnectHeaders.receipt) {\n                  disconnectHeaders.receipt = \"close-\" + this._counter++;\n                }\n\n                this.watchForReceipt(disconnectHeaders.receipt, function (frame) {\n                  _this._closeWebsocket();\n\n                  _this._cleanUp();\n\n                  _this.onDisconnect(frame);\n                });\n\n                this._transmit({\n                  command: 'DISCONNECT',\n                  headers: disconnectHeaders\n                });\n              } catch (error) {\n                this.debug(\"Ignoring error during disconnect \" + error);\n              }\n            } else {\n              if (this._webSocket.readyState === web_socket_state_1.WebSocketState.CONNECTING || this._webSocket.readyState === web_socket_state_1.WebSocketState.OPEN) {\n                this._closeWebsocket();\n              }\n            }\n          };\n\n          StompHandler.prototype._cleanUp = function () {\n            this._connected = false;\n\n            if (this._pinger) {\n              clearInterval(this._pinger);\n            }\n\n            if (this._ponger) {\n              clearInterval(this._ponger);\n            }\n          };\n\n          StompHandler.prototype.publish = function (params) {\n            var destination = params.destination,\n                headers = params.headers,\n                body = params.body,\n                binaryBody = params.binaryBody,\n                skipContentLengthHeader = params.skipContentLengthHeader;\n            var hdrs = Object.assign({\n              destination: destination\n            }, headers);\n\n            this._transmit({\n              command: 'SEND',\n              headers: hdrs,\n              body: body,\n              binaryBody: binaryBody,\n              skipContentLengthHeader: skipContentLengthHeader\n            });\n          };\n\n          StompHandler.prototype.watchForReceipt = function (receiptId, callback) {\n            this._receiptWatchers[receiptId] = callback;\n          };\n\n          StompHandler.prototype.subscribe = function (destination, callback, headers) {\n            if (headers === void 0) {\n              headers = {};\n            }\n\n            headers = Object.assign({}, headers);\n\n            if (!headers.id) {\n              headers.id = \"sub-\" + this._counter++;\n            }\n\n            headers.destination = destination;\n            this._subscriptions[headers.id] = callback;\n\n            this._transmit({\n              command: 'SUBSCRIBE',\n              headers: headers\n            });\n\n            var client = this;\n            return {\n              id: headers.id,\n              unsubscribe: function unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n              }\n            };\n          };\n\n          StompHandler.prototype.unsubscribe = function (id, headers) {\n            if (headers === void 0) {\n              headers = {};\n            }\n\n            headers = Object.assign({}, headers);\n            delete this._subscriptions[id];\n            headers.id = id;\n\n            this._transmit({\n              command: 'UNSUBSCRIBE',\n              headers: headers\n            });\n          };\n\n          StompHandler.prototype.begin = function (transactionId) {\n            var txId = transactionId || \"tx-\" + this._counter++;\n\n            this._transmit({\n              command: 'BEGIN',\n              headers: {\n                transaction: txId\n              }\n            });\n\n            var client = this;\n            return {\n              id: txId,\n              commit: function commit() {\n                client.commit(txId);\n              },\n              abort: function abort() {\n                client.abort(txId);\n              }\n            };\n          };\n\n          StompHandler.prototype.commit = function (transactionId) {\n            this._transmit({\n              command: 'COMMIT',\n              headers: {\n                transaction: transactionId\n              }\n            });\n          };\n\n          StompHandler.prototype.abort = function (transactionId) {\n            this._transmit({\n              command: 'ABORT',\n              headers: {\n                transaction: transactionId\n              }\n            });\n          };\n\n          StompHandler.prototype.ack = function (messageId, subscriptionId, headers) {\n            if (headers === void 0) {\n              headers = {};\n            }\n\n            headers = Object.assign({}, headers);\n\n            if (this._connectedVersion === versions_1.Versions.V1_2) {\n              headers.id = messageId;\n            } else {\n              headers['message-id'] = messageId;\n            }\n\n            headers.subscription = subscriptionId;\n\n            this._transmit({\n              command: 'ACK',\n              headers: headers\n            });\n          };\n\n          StompHandler.prototype.nack = function (messageId, subscriptionId, headers) {\n            if (headers === void 0) {\n              headers = {};\n            }\n\n            headers = Object.assign({}, headers);\n\n            if (this._connectedVersion === versions_1.Versions.V1_2) {\n              headers.id = messageId;\n            } else {\n              headers['message-id'] = messageId;\n            }\n\n            headers.subscription = subscriptionId;\n            return this._transmit({\n              command: 'NACK',\n              headers: headers\n            });\n          };\n\n          return StompHandler;\n        }();\n\n        exports.StompHandler = StompHandler;\n        /***/\n      },\n\n      /***/\n      \"./src/stomp-headers.ts\":\n      /*!******************************!*\\\n        !*** ./src/stomp-headers.ts ***!\n        \\******************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcStompHeadersTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        /**\n         * STOMP headers. Many functions calls will accept headers as parameters.\n         * The headers sent by Broker will be available as [IFrame#headers]{@link IFrame#headers}.\n         *\n         * `key` and `value` must be valid strings.\n         * In addition, `key` must not contain `CR`, `LF`, or `:`.\n         *\n         * Part of `@stomp/stompjs`.\n         */\n\n        var StompHeaders =\n        /** @class */\n        function () {\n          function StompHeaders() {}\n\n          return StompHeaders;\n        }();\n\n        exports.StompHeaders = StompHeaders;\n        /***/\n      },\n\n      /***/\n      \"./src/stomp-subscription.ts\":\n      /*!***********************************!*\\\n        !*** ./src/stomp-subscription.ts ***!\n        \\***********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcStompSubscriptionTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        /**\n         * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n         *\n         * Part of `@stomp/stompjs`.\n         */\n\n        var StompSubscription =\n        /** @class */\n        function () {\n          function StompSubscription() {}\n\n          return StompSubscription;\n        }();\n\n        exports.StompSubscription = StompSubscription;\n        /***/\n      },\n\n      /***/\n      \"./src/versions.ts\":\n      /*!*************************!*\\\n        !*** ./src/versions.ts ***!\n        \\*************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcVersionsTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        /**\n         * Supported STOMP versions\n         *\n         * Part of `@stomp/stompjs`.\n         */\n\n        var Versions =\n        /** @class */\n        function () {\n          /**\n           * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n           *\n           * You will an instance if this class if you want to override supported versions to be declared during\n           * STOMP handshake.\n           */\n          function Versions(versions) {\n            this.versions = versions;\n          }\n          /**\n           * Used as part of CONNECT STOMP Frame\n           */\n\n\n          Versions.prototype.supportedVersions = function () {\n            return this.versions.join(',');\n          };\n          /**\n           * Used while creating a WebSocket\n           */\n\n\n          Versions.prototype.protocolVersions = function () {\n            return this.versions.map(function (x) {\n              return \"v\" + x.replace('.', '') + \".stomp\";\n            });\n          };\n          /**\n           * Indicates protocol version 1.0\n           */\n\n\n          Versions.V1_0 = '1.0';\n          /**\n           * Indicates protocol version 1.1\n           */\n\n          Versions.V1_1 = '1.1';\n          /**\n           * Indicates protocol version 1.2\n           */\n\n          Versions.V1_2 = '1.2';\n          /**\n           * @internal\n           */\n\n          Versions.default = new Versions([Versions.V1_0, Versions.V1_1, Versions.V1_2]);\n          return Versions;\n        }();\n\n        exports.Versions = Versions;\n        /***/\n      },\n\n      /***/\n      \"./src/web-socket-state.ts\":\n      /*!*********************************!*\\\n        !*** ./src/web-socket-state.ts ***!\n        \\*********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function srcWebSocketStateTs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        /**\n         * Possible states for the WebSocket, copied here to avoid dependency on WebSocket class\n         *\n         * Part of `@stomp/rx-stomp`\n         *\n         * @internal\n         */\n\n        var WebSocketState;\n\n        (function (WebSocketState) {\n          WebSocketState[WebSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n          WebSocketState[WebSocketState[\"OPEN\"] = 1] = \"OPEN\";\n          WebSocketState[WebSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n          WebSocketState[WebSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n        })(WebSocketState = exports.WebSocketState || (exports.WebSocketState = {}));\n        /***/\n\n      },\n\n      /***/\n      0:\n      /*!****************************!*\\\n        !*** multi ./src/index.ts ***!\n        \\****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function _(module, exports, __webpack_require__) {\n        module.exports = __webpack_require__(\n        /*! /home/kdeepak/MyWork/Tech/stomp/stompjs/src/index.ts */\n        \"./src/index.ts\");\n        /***/\n      }\n      /******/\n\n    })\n  );\n});","map":{"version":3,"sources":["webpack://StompJs/webpack/universalModuleDefinition","webpack://StompJs/webpack/bootstrap","webpack://StompJs/src/byte.ts","webpack://StompJs/src/client.ts","webpack://StompJs/src/compatibility/compat-client.ts","webpack://StompJs/src/compatibility/heartbeat-info.ts","webpack://StompJs/src/compatibility/stomp.ts","webpack://StompJs/src/frame-impl.ts","webpack://StompJs/src/index.ts","webpack://StompJs/src/parser.ts","webpack://StompJs/src/stomp-config.ts","webpack://StompJs/src/stomp-handler.ts","webpack://StompJs/src/stomp-headers.ts","webpack://StompJs/src/stomp-subscription.ts","webpack://StompJs/src/versions.ts","webpack://StompJs/src/web-socket-state.ts"],"names":[],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"StompJs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StompJs\"] = factory();\n\telse\n\t\troot[\"StompJs\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport const BYTE = {\n  // LINEFEED byte (octet 10)\n  LF: '\\x0A',\n  // NULL byte (octet 0)\n  NULL: '\\x00'\n};\n","import {ITransaction} from './i-transaction';\nimport {StompConfig} from './stomp-config';\nimport {StompHandler} from './stomp-handler';\nimport {StompHeaders} from './stomp-headers';\nimport {StompSubscription} from './stomp-subscription';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  IPublishParams,\n  messageCallbackType,\n  wsErrorCallbackType\n} from './types';\nimport {Versions} from './versions';\nimport {WebSocketState} from './web-socket-state';\n\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [Client#webSocketFactory]{@link Client#webSocketFactory} need to be set.\n   * If both are set, [Client#webSocketFactory]{@link Client#webSocketFactory} will be used.\n   */\n  public brokerURL: string;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.0 and 1.1\n   *        client.stompVersions = new Versions(['1.0', '1.1'])\n   * ```\n   */\n  public stompVersions = Versions.default;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        client.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        client.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   */\n  public webSocketFactory: () => WebSocket;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n   */\n  public reconnectDelay: number = 5000;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   */\n  public heartbeatIncoming: number = 10000;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   */\n  public heartbeatOutgoing: number = 10000;\n\n  /**\n   * This switches on a non standard behavior while sending WebSocket packets.\n   * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   * Only Java Spring brokers seems to use this mode.\n   *\n   * WebSockets, by itself, split large (text) packets,\n   * so it is not needed with a truly compliant STOMP/WebSocket broker.\n   * Actually setting it for such broker will cause large messages to fail.\n   *\n   * `false` by default.\n   *\n   * Binary frames are never split.\n   */\n  public splitLargeFrames: boolean = false;\n\n  /**\n   * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n   * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n   */\n  public maxWebSocketChunkSize: number = 8 * 1024;\n\n  /**\n   * Usually the\n   * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n   * is automatically decided by type of the payload.\n   * Default is `false`, which should work with all compliant brokers.\n   *\n   * Set this flag to force binary frames.\n   */\n  public forceBinaryWSFrames: boolean = false;\n\n  /**\n   * A bug in ReactNative chops a string on occurrence of a NULL.\n   * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n   * This makes incoming WebSocket messages invalid STOMP packets.\n   * Setting this flag attempts to reverse the damage by appending a NULL.\n   * If the broker splits a large message into multiple WebSocket messages,\n   * this flag will cause data loss and abnormal termination of connection.\n   *\n   * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n   */\n  public appendMissingNULLonIncoming: boolean = false;\n\n  /**\n   * Underlying WebSocket instance, READONLY.\n   */\n  get webSocket(): WebSocket {\n    return this._webSocket;\n  }\n  /**\n   * Underlying WebSocket instance\n   * @internal\n   */\n  protected _webSocket: WebSocket;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   */\n  public connectHeaders: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   */\n  get disconnectHeaders(): StompHeaders {\n    return this._disconnectHeaders;\n  }\n\n  set disconnectHeaders(value: StompHeaders) {\n    this._disconnectHeaders = value;\n    if (this._stompHandler) {\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n    }\n  }\n  private _disconnectHeaders: StompHeaders;\n\n  /**\n   * This function will be called for any unhandled messages.\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\n   *\n   * It can also get invoked with stray messages while the server is processing\n   * a request to [Client#unsubscribe]{@link Client#unsubscribe}\n   * from an endpoint.\n   *\n   * The actual {@link IMessage} will be passed as parameter to the callback.\n   */\n  public onUnhandledMessage: messageCallbackType;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}. See\n   * [Client#watchForReceipt]{@link Client#watchForReceipt} for examples.\n   *\n   * The actual {@link FrameImpl} will be passed as parameter to the callback.\n   */\n  public onUnhandledReceipt: frameCallbackType;\n\n  /**\n   * Will be invoked if {@link FrameImpl} of unknown type is received from the STOMP broker.\n   *\n   * The actual {@link IFrame} will be passed as parameter to the callback.\n   */\n  public onUnhandledFrame: frameCallbackType;\n\n  /**\n   * `true` if there is a active connection with STOMP Broker\n   */\n  get connected(): boolean {\n    return (!!this._stompHandler) && this._stompHandler.connected;\n  }\n\n  /**\n   * Callback, invoked on before a connection connection to the STOMP broker.\n   *\n   * You can change options on the client, which will impact the immediate connect.\n   * It is valid to call [Client#decativate]{@link Client#deactivate} in this callback.\n   *\n   * As of version 5.1, this callback can be\n   * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n   * (i.e., it can return a\n   * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\n   * In that case connect will be called only after the Promise is resolved.\n   * This can be used to reliably fetch credentials, access token etc. from some other service\n   * in an asynchronous way.\n   */\n  public beforeConnect: () => void|Promise<void>;\n\n  /**\n   * Callback, invoked on every successful connection to the STOMP broker.\n   *\n   * The actual {@link FrameImpl} will be passed as parameter to the callback.\n   * Sometimes clients will like to use headers from this frame.\n   */\n  public onConnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on every successful disconnection from the STOMP broker. It will not be invoked if\n   * the STOMP broker disconnected due to an error.\n   *\n   * The actual Receipt {@link FrameImpl} acknowledging the DISCONNECT will be passed as parameter to the callback.\n   *\n   * The way STOMP protocol is designed, the connection may close/terminate without the client\n   * receiving the Receipt {@link FrameImpl} acknowledging the DISCONNECT.\n   * You might find [Client#onWebSocketClose]{@link Client#onWebSocketClose} more appropriate to watch\n   * STOMP broker disconnects.\n   */\n  public onDisconnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on an ERROR frame received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   * Please check broker specific documentation for exact behavior.\n   *\n   * The actual {@link IFrame} will be passed as parameter to the callback.\n   */\n  public onStompError: frameCallbackType;\n\n  /**\n   * Callback, invoked when underlying WebSocket is closed.\n   *\n   * Actual [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n   * is passed as parameter to the callback.\n   */\n  public onWebSocketClose: closeEventCallbackType;\n\n  /**\n   * Callback, invoked when underlying WebSocket raises an error.\n   *\n   * Actual [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\n   * is passed as parameter to the callback.\n   */\n  public onWebSocketError: wsErrorCallbackType;\n\n  /**\n   * Set it to log the actual raw communication with the broker.\n   * When unset, it logs headers of the parsed frames.\n   *\n   * Change in this effects from next broker reconnect.\n   *\n   * **Caution: this assumes that frames only have valid UTF8 strings.**\n   */\n  public logRawCommunication: boolean;\n\n  /**\n   * By default, debug messages are discarded. To log to `console` following can be used:\n   *\n   * ```javascript\n   *        client.debug = function(str) {\n   *          console.log(str);\n   *        };\n   * ```\n   *\n   * Currently this method does not support levels of log. Be aware that the output can be quite verbose\n   * and may contain sensitive information (like passwords, tokens etc.).\n   */\n  public debug: debugFnType;\n\n  /**\n   * version of STOMP protocol negotiated with the server, READONLY\n   */\n  get connectedVersion(): string {\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n  }\n\n  private _stompHandler: StompHandler;\n\n  /**\n   * if the client is active (connected or going to reconnect)\n   */\n  get active(): boolean {\n    return this._active;\n  }\n  private _active: boolean = false;\n  private _reconnector: any;\n\n  /**\n   * Create an instance.\n   */\n  constructor(conf: StompConfig = {}) {\n    // Dummy callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this._disconnectHeaders = {};\n\n    // Apply configuration\n    this.configure(conf);\n  }\n\n  /**\n   * Update configuration.\n   */\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (Object as any).assign(this, conf);\n  }\n\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n   */\n  public activate(): void {\n    this._active = true;\n\n    this._connect();\n  }\n\n  private async _connect(): Promise<void> {\n    if (this.connected) {\n      this.debug('STOMP: already connected, nothing to do');\n      return;\n    }\n\n    await this.beforeConnect();\n\n    if (!this._active) {\n      this.debug('Client has been marked inactive, will not attempt to connect');\n      return;\n    }\n\n    this.debug('Opening Web Socket...');\n\n    // Get the actual WebSocket (or a similar object)\n    this._webSocket = this._createWebSocket();\n\n    this._stompHandler = new StompHandler(this, this._webSocket, {\n      debug: this.debug,\n      stompVersions: this.stompVersions,\n      connectHeaders: this.connectHeaders,\n      disconnectHeaders: this._disconnectHeaders,\n      heartbeatIncoming: this.heartbeatIncoming,\n      heartbeatOutgoing: this.heartbeatOutgoing,\n      splitLargeFrames: this.splitLargeFrames,\n      maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n      forceBinaryWSFrames: this.forceBinaryWSFrames,\n      logRawCommunication: this.logRawCommunication,\n      appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n\n      onConnect: (frame) => {\n        if (!this._active) {\n          this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n          this._disposeStompHandler();\n          return;\n        }\n        this.onConnect(frame);\n      },\n      onDisconnect: (frame) => {\n        this.onDisconnect(frame);\n      },\n      onStompError: (frame) => {\n        this.onStompError(frame);\n      },\n      onWebSocketClose: (evt) => {\n        this.onWebSocketClose(evt);\n        // The callback is called before attempting to reconnect, this would allow the client\n        // to be `deactivated` in the callback.\n        if (this._active) {\n          this._schedule_reconnect();\n        }\n      },\n      onWebSocketError: (evt) => {\n        this.onWebSocketError(evt);\n      },\n      onUnhandledMessage: (message) => {\n        this.onUnhandledMessage(message);\n      },\n      onUnhandledReceipt: (frame) => {\n        this.onUnhandledReceipt(frame);\n      },\n      onUnhandledFrame: (frame) => {\n        this.onUnhandledFrame(frame);\n      }\n    });\n\n    this._stompHandler.start();\n  }\n\n  private _createWebSocket() {\n    let webSocket: WebSocket;\n\n    if (this.webSocketFactory) {\n      webSocket = this.webSocketFactory();\n    } else {\n      webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n    }\n    webSocket.binaryType = 'arraybuffer';\n    return webSocket;\n  }\n\n  private _schedule_reconnect(): void {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n\n  /**\n   * Disconnect if connected and stop auto reconnect loop.\n   * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n   *\n   * To reactivate you can call [Client#activate]{@link Client#activate}.\n   */\n  public deactivate(): void {\n    // indicate that auto reconnect loop should terminate\n    this._active = false;\n\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n    }\n    this._disposeStompHandler();\n  }\n\n  /**\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n   * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n   * After forcing disconnect, automatic reconnect will be attempted.\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n   */\n  public forceDisconnect() {\n    if (this._webSocket) {\n      if (this._webSocket.readyState === WebSocketState.CONNECTING\n              || this._webSocket.readyState === WebSocketState.OPEN) {\n        this._stompHandler._closeWebsocket();\n      }\n    }\n  }\n\n  private _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n      this._stompHandler = null;\n    }\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n   *\n   * `body` must be String.\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\n   *\n   * To send a binary message body use binaryBody parameter. It should be a\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n   * For binary messages `content-length` header is always added.\n   *\n   * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n   * and `content-length` header is missing.\n   *\n   * ```javascript\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   * ```\n   */\n  public publish(params: IPublishParams) {\n    this._stompHandler.publish(params);\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link FrameImpl} will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Subscribing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n   *\n   *\n   *        // Publishing with acknowledgement\n   *        receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   * ```\n   */\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n\n  /**\n   * Subscribe to a STOMP Broker location. The callback will be invoked for each received message with\n   * the {@link IMessage} as argument.\n   *\n   * Note: The library will generate an unique ID if there is none provided in the headers.\n   *       To use your own ID, pass it using the headers argument.\n   *\n   * ```javascript\n   *        callback = function(message) {\n   *        // called when the client receives a STOMP message from the server\n   *          if (message.body) {\n   *            alert(\"got message with body \" + message.body)\n   *          } else {\n   *            alert(\"got empty message\");\n   *          }\n   *        });\n   *\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   *        // Explicit subscription id\n   *        var mySubId = 'my-subscription-id-001';\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n   * ```\n   */\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n\n  /**\n   * It is preferable to unsubscribe from a subscription by calling\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n   *\n   * ```javascript\n   *        var subscription = client.subscribe(destination, onmessage);\n   *        // ...\n   *        subscription.unsubscribe();\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n   */\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    this._stompHandler.unsubscribe(id, headers);\n  }\n\n  /**\n   * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n   * and [abort]{@link ITransaction#abort}.\n   *\n   * `transactionId` is optional, if not passed the library will generate it internally.\n   */\n  public begin(transactionId?: string): ITransaction {\n    return this._stompHandler.begin(transactionId);\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.commit();\n   * ```\n   */\n  public commit(transactionId: string): void {\n    this._stompHandler.commit(transactionId);\n  }\n\n  /**\n   * Abort a transaction.\n   * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.abort();\n   * ```\n   */\n  public abort(transactionId: string): void {\n    this._stompHandler.abort(transactionId);\n  }\n\n  /**\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n   * on the {@link IMessage} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // acknowledge it\n   *          message.ack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n\n  /**\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n   * on the {@link IMessage} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // an error occurs, nack it\n   *          message.nack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}\n","import {Client} from '../client';\nimport {StompHeaders} from '../stomp-headers';\nimport {frameCallbackType, messageCallbackType} from '../types';\nimport {HeartbeatInfo} from './heartbeat-info';\n\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * Part of `@stomp/stompjs`.\n *\n * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n */\nexport class CompatClient extends Client {\n\n  /**\n   * It is no op now. No longer needed. Large packets work out of the box.\n   */\n  public maxWebSocketFrameSize: number = 16 * 1024;\n\n  /**\n   * Available for backward compatibility, please shift to using {@link Client}\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   *\n   * **Deprecated**\n   *\n   * @internal\n   */\n  constructor(webSocketFactory: () => any) {\n    super();\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message: any[]) => {\n      console.log(...message);\n    };\n  }\n\n  private _parseConnect(...args: any[]): any {\n    let closeEventCallback;\n    let connectCallback;\n    let errorCallback;\n    let headers: StompHeaders = {};\n    if (args.length < 2) {\n      throw new Error(('Connect requires at least 2 arguments'));\n    }\n    if (typeof(args[1]) === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback, headers.host] = args;\n          break;\n        default:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n   *\n   * **Deprecated**\n   *\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * overloads:\n   * - connect(headers, connectCallback)\n   * - connect(headers, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback)\n   * - connect(login, passcode, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n   *\n   * params:\n   * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n   * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n   * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n   * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n   * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public connect(...args: any[]): void {\n    const out = this._parseConnect(...args);\n\n    if (out[0]) { this.connectHeaders = out[0]; }\n    if (out[1]) { this.onConnect = out[1]; }\n    if (out[2]) { this.onStompError = out[2]; }\n    if (out[3]) { this.onWebSocketClose = out[3]; }\n\n    super.activate();\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n   *\n   * **Deprecated**\n   *\n   * See:\n   * [Client#onDisconnect]{@link Client#onDisconnect}, and\n   * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public disconnect(disconnectCallback?: any, headers: StompHeaders = {}): void {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n\n    super.deactivate();\n  }\n\n  /**\n   * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n   *\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   *  **Deprecated**, use [Client#publish]{@link Client#publish}\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n   *\n   *        // If you want to send a message with a body, you must also pass the headers argument.\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n   * ```\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public send(destination: string, headers: {[key: string]: any} = {}, body: string = ''): void {\n    headers = (Object as any).assign({}, headers);\n\n    const skipContentLengthHeader = (headers['content-length'] === false);\n    if (skipContentLengthHeader) {\n      delete headers['content-length'];\n    }\n    this.publish({\n      destination,\n      headers: headers as StompHeaders,\n      body,\n      skipContentLengthHeader\n    });\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   *\n   * **Deprecated**\n   */\n  set reconnect_delay(value: number) {\n    this.reconnectDelay = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n   *\n   * **Deprecated**\n   */\n  get ws(): any {\n    return this._webSocket;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n   *\n   * **Deprecated**\n   */\n  get version() {\n    return this.connectedVersion;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  get onreceive(): messageCallbackType {\n    return this.onUnhandledMessage;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  set onreceive(value: messageCallbackType) {\n    this.onUnhandledMessage = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n   *\n   * **Deprecated**\n   */\n  get onreceipt(): frameCallbackType {\n    return this.onUnhandledReceipt;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   *\n   * **Deprecated**\n   */\n  set onreceipt(value: frameCallbackType) {\n    this.onUnhandledReceipt = value;\n  }\n\n  private _heartbeatInfo: HeartbeatInfo = new HeartbeatInfo(this);\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  set heartbeat(value: {incoming: number, outgoing: number}) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}\n","import {CompatClient} from './compat-client';\n\n/**\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class HeartbeatInfo {\n  constructor(private client: CompatClient) {\n  }\n\n  get outgoing(): number {\n    return this.client.heartbeatOutgoing;\n  }\n\n  set outgoing(value: number) {\n    this.client.heartbeatOutgoing = value;\n  }\n\n  get incoming(): number {\n    return this.client.heartbeatIncoming;\n  }\n\n  set incoming(value: number) {\n    this.client.heartbeatIncoming = value;\n  }\n}\n","import {Versions} from '../versions';\nimport {CompatClient} from './compat-client';\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   *\n   * **Deprecated**\n   *\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  // tslint:disable-next-line:variable-name\n  public static WebSocketClass: any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public static client(url: string, protocols?: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.default.protocolVersions(); }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(wsFn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once.\n   * While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public static over(ws: any): CompatClient {\n    let wsFn: () => any;\n\n    if (typeof (ws) === 'function') {\n      wsFn = ws;\n    } else {\n      console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' +\n        'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n      wsFn = () => ws;\n    }\n\n    return new CompatClient(wsFn);\n  }\n}\n","import {BYTE} from './byte';\nimport {IFrame} from './i-frame';\nimport {StompHeaders} from './stomp-headers';\nimport {IRawFrameType} from './types';\n\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl implements IFrame {\n  /**\n   * STOMP Command\n   */\n  public command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  public headers: StompHeaders;\n\n  /**\n   * Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n   */\n  public isBinaryBody: boolean;\n\n  /**\n   * body of the frame\n   */\n  get body(): string {\n    if (!this._body && this.isBinaryBody) {\n      this._body = new TextDecoder().decode(this._binaryBody);\n    }\n    return this._body;\n  }\n  private _body: string;\n\n  /**\n   * body as Uint8Array\n   */\n  get binaryBody(): Uint8Array {\n    if (!this._binaryBody && !this.isBinaryBody) {\n      this._binaryBody = new TextEncoder().encode(this._body);\n    }\n    return this._binaryBody;\n  }\n  private _binaryBody: Uint8Array;\n\n  private escapeHeaderValues: boolean;\n  private skipContentLengthHeader: boolean;\n\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(params: {\n    command: string, headers?: StompHeaders, body?: string, binaryBody?: Uint8Array,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const {command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader} = params;\n    this.command = command;\n    this.headers = (Object as any).assign({}, headers || {});\n\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n  public static fromRawFrame(rawFrame: IRawFrameType, escapeHeaderValues: boolean): FrameImpl {\n    const headers: StompHeaders = {};\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\n\n    // In case of repeated headers, as per standards, first value need to be used\n    for (const header of rawFrame.headers.reverse()) {\n      const idx = header.indexOf(':');\n\n      const key = trim(header[0]);\n      let value = trim(header[1]);\n\n      if (escapeHeaderValues && (rawFrame.command !== 'CONNECT') && (rawFrame.command !== 'CONNECTED')) {\n        value = FrameImpl.hdrValueUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n\n    return new FrameImpl({\n      command: rawFrame.command,\n      headers,\n      binaryBody: rawFrame.binaryBody,\n      escapeHeaderValues\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public toString(): string {\n    return this.serializeCmdAndHeaders();\n  }\n\n  /**\n   * serialize this Frame in a format suitable to be passed to WebSocket.\n   * If the body is string the output will be string.\n   * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n   *\n   * @internal\n   */\n  public serialize(): string|ArrayBuffer {\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\n\n    if (this.isBinaryBody) {\n      return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n    } else {\n      return cmdAndHeaders + this._body + BYTE.NULL;\n    }\n  }\n\n  private serializeCmdAndHeaders(): string {\n    const lines = [this.command];\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n\n    for (const name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n        lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.isBinaryBody || (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n      lines.push(`content-length:${this.bodyLength()}`);\n    }\n    return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n  }\n\n  private isBodyEmpty(): boolean {\n    return this.bodyLength() === 0;\n  }\n\n  private bodyLength(): number {\n    const binaryBody = this.binaryBody;\n    return binaryBody ? binaryBody.length : 0;\n  }\n\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n  private static sizeOfUTF8(s: string): number {\n    return s ? new TextEncoder().encode(s).length : 0;\n  }\n\n  private static toUnit8Array(cmdAndHeaders: string, binaryBody: Uint8Array): Uint8Array {\n    const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n    const nullTerminator = new Uint8Array([0]);\n    const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n\n    uint8Frame.set(uint8CmdAndHeaders);\n    uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n    uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n\n    return uint8Frame;\n  }\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n  public static marshall(params: {\n    command: string, headers?: StompHeaders, body?: string, binaryBody?: Uint8Array,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const frame = new FrameImpl(params);\n    return frame.serialize();\n  }\n\n  /**\n   *  Escape header values\n   */\n  private static hdrValueEscape(str: string): string {\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n  }\n\n  /**\n   * UnEscape header values\n   */\n  private static hdrValueUnEscape(str: string): string {\n    return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n  }\n}\n","export * from './client';\nexport * from './frame-impl';\nexport * from './i-frame';\nexport * from './i-message';\nexport * from './parser';\nexport * from './stomp-config';\nexport * from './stomp-headers';\nexport * from './stomp-subscription';\nexport * from './i-transaction';\nexport * from './types';\nexport * from './versions';\nexport * from './web-socket-state';\n\n// Compatibility code\nexport * from './compatibility/compat-client';\nexport * from './compatibility/stomp';\n","import { IRawFrameType } from './types';\n\n/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n  private readonly _encoder = new TextEncoder();\n  private readonly _decoder = new TextDecoder();\n\n  private _results: IRawFrameType;\n\n  private _token: number[] = [];\n  private _headerKey: string;\n  private _bodyBytesRemaining: number;\n\n  private _onByte: (byte: number) => void;\n\n  public constructor(public onFrame: (rawFrame: IRawFrameType) => void, public onIncomingPing: () => void) {\n    this._initState();\n  }\n\n  public parseChunk(segment: string | ArrayBuffer, appendMissingNULLonIncoming: boolean = false) {\n    let chunk: Uint8Array;\n\n    if ((segment instanceof ArrayBuffer)) {\n      chunk = new Uint8Array(segment);\n    } else {\n      chunk = this._encoder.encode(segment);\n    }\n\n    // See https://github.com/stomp-js/stompjs/issues/89\n    // Remove when underlying issue is fixed.\n    //\n    // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n    if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n      const chunkWithNull = new Uint8Array(chunk.length + 1);\n      chunkWithNull.set(chunk, 0);\n      chunkWithNull[chunk.length] = 0;\n      chunk = chunkWithNull;\n    }\n\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < chunk.length; i++) {\n      const byte = chunk[i];\n      this._onByte(byte);\n    }\n  }\n\n  // The following implements a simple Rec Descent Parser.\n  // The grammar is simple and just one byte tells what should be the next state\n\n  private _collectFrame(byte: number): void {\n    if (byte === NULL) { // Ignore\n      return;\n    }\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) { // Incoming Ping\n      this.onIncomingPing();\n      return;\n    }\n\n    this._onByte = this._collectCommand;\n    this._reinjectByte(byte);\n  }\n\n  private _collectCommand(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._results.command = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaders;\n      return;\n    }\n\n    this._consumeByte(byte);\n  }\n\n  private _collectHeaders(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._setupCollectBody();\n      return;\n    }\n    this._onByte = this._collectHeaderKey;\n    this._reinjectByte(byte);\n  }\n\n  private _reinjectByte(byte: number) {\n    this._onByte(byte);\n  }\n\n  private _collectHeaderKey(byte: number): void {\n    if (byte === COLON) {\n      this._headerKey = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaderValue;\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _collectHeaderValue(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n      this._headerKey = undefined;\n      this._onByte = this._collectHeaders;\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _setupCollectBody() {\n    const contentLengthHeader = this._results.headers.filter((header: [string, string]) => {\n      return header[0] === 'content-length';\n    })[0];\n\n    if (contentLengthHeader) {\n      this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n      this._onByte = this._collectBodyFixedSize;\n    } else {\n      this._onByte = this._collectBodyNullTerminated;\n    }\n  }\n\n  private _collectBodyNullTerminated(byte: number): void {\n    if (byte === NULL) {\n      this._retrievedBody();\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _collectBodyFixedSize(byte: number): void {\n    // It is post decrement, so that we discard the trailing NULL octet\n    if (this._bodyBytesRemaining-- === 0) {\n      this._retrievedBody();\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _retrievedBody() {\n    this._results.binaryBody = this._consumeTokenAsRaw();\n\n    this.onFrame(this._results);\n\n    this._initState();\n  }\n\n  // Rec Descent Parser helpers\n\n  private _consumeByte(byte: number) {\n    this._token.push(byte);\n  }\n\n  private _consumeTokenAsUTF8() {\n    return this._decoder.decode(this._consumeTokenAsRaw());\n  }\n\n  private _consumeTokenAsRaw() {\n    const rawResult = new Uint8Array(this._token);\n    this._token = [];\n    return rawResult;\n  }\n\n  private _initState() {\n    this._results = {\n      command: undefined,\n      headers: [],\n      binaryBody: undefined\n    };\n\n    this._token = [];\n    this._headerKey = undefined;\n\n    this._onByte = this._collectFrame;\n  }\n\n}\n","import {StompHeaders} from './stomp-headers';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType,\n  wsErrorCallbackType\n} from './types';\nimport {Versions} from './versions';\n\n/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompConfig {\n  /**\n   * See [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public brokerURL?: string;\n\n  /**\n   * See See [Client#stompVersions]{@link Client#stompVersions}.\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * See [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * See [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * See [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}.\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * See [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n   */\n  public splitLargeFrames?: boolean;\n\n  /**\n   * See [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n   */\n  public forceBinaryWSFrames?: boolean;\n\n  /**\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n   */\n  public appendMissingNULLonIncoming?: boolean;\n\n  /**\n   * See [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   */\n  public maxWebSocketChunkSize?: number;\n\n  /**\n   * See [Client#connectHeaders]{@link Client#connectHeaders}.\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#disconnectHeaders]{@link Client#disconnectHeaders}.\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   */\n  public onUnhandledMessage?: messageCallbackType;\n\n  /**\n   * See [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   */\n  public onUnhandledReceipt?: frameCallbackType;\n\n  /**\n   * See [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}.\n   */\n  public onUnhandledFrame?: frameCallbackType;\n\n  /**\n   * See [Client#beforeConnect]{@link Client#beforeConnect}.\n   */\n  public beforeConnect?: () => void|Promise<void>;\n\n  /**\n   * See [Client#onConnect]{@link Client#onConnect}.\n   */\n  public onConnect?: frameCallbackType;\n\n  /**\n   * See [Client#onDisconnect]{@link Client#onDisconnect}.\n   */\n  public onDisconnect?: frameCallbackType;\n\n  /**\n   * See [Client#onStompError]{@link Client#onStompError}.\n   */\n  public onStompError?: frameCallbackType;\n\n  /**\n   * See [Client#onWebSocketClose]{@link Client#onWebSocketClose}.\n   */\n  public onWebSocketClose?: closeEventCallbackType;\n\n  /**\n   * See [Client#onWebSocketError]{@link Client#onWebSocketError}.\n   */\n  public onWebSocketError?: wsErrorCallbackType;\n\n  /**\n   * See [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /**\n   * See [Client#debug]{@link Client#debug}.\n   */\n  public debug?: debugFnType;\n}\n","import {BYTE} from './byte';\nimport {Client} from './client';\nimport {FrameImpl} from './frame-impl';\nimport {IMessage} from './i-message';\nimport {ITransaction} from './i-transaction';\nimport {Parser} from './parser';\nimport {StompConfig} from './stomp-config';\nimport {StompHeaders} from './stomp-headers';\nimport {StompSubscription} from './stomp-subscription';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  IPublishParams,\n  messageCallbackType,\n  wsErrorCallbackType\n} from './types';\nimport {Versions} from './versions';\nimport {WebSocketState} from './web-socket-state';\n\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n  public debug: debugFnType;\n\n  public stompVersions: Versions;\n\n  public connectHeaders: StompHeaders;\n\n  public disconnectHeaders: StompHeaders;\n\n  public heartbeatIncoming: number;\n\n  public heartbeatOutgoing: number;\n\n  public onUnhandledMessage: messageCallbackType;\n\n  public onUnhandledReceipt: frameCallbackType;\n\n  public onUnhandledFrame: frameCallbackType;\n\n  public onConnect: frameCallbackType;\n\n  public onDisconnect: frameCallbackType;\n\n  public onStompError: frameCallbackType;\n\n  public onWebSocketClose: closeEventCallbackType;\n\n  public onWebSocketError: wsErrorCallbackType;\n\n  public logRawCommunication: boolean;\n\n  public splitLargeFrames: boolean;\n\n  public maxWebSocketChunkSize: number;\n\n  public forceBinaryWSFrames: boolean;\n\n  public appendMissingNULLonIncoming: boolean;\n\n  get connectedVersion(): string {\n    return this._connectedVersion;\n  }\n  private _connectedVersion: string;\n\n  get connected(): boolean {\n    return this._connected;\n  }\n\n  private _connected: boolean;\n\n  private readonly _subscriptions: { [key: string]: messageCallbackType };\n  private readonly _receiptWatchers: { [key: string]: frameCallbackType };\n  private _partialData: string;\n  private _escapeHeaderValues: boolean;\n  private _counter: number;\n  private _pinger: any;\n  private _ponger: any;\n  private _lastServerActivityTS: number;\n\n  constructor(private _client: Client, private _webSocket: WebSocket, config: StompConfig = {}) {\n    // used to index subscribers\n    this._counter = 0;\n\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n\n    this._partialData = '';\n\n    this._escapeHeaderValues = false;\n\n    this._lastServerActivityTS = Date.now();\n\n    this.configure(config);\n  }\n\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (Object as any).assign(this, conf);\n  }\n\n  public start(): void {\n    const parser = new Parser(\n      // On Frame\n      (rawFrame) => {\n        const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n\n        // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n        if (!this.logRawCommunication) {\n          this.debug(`<<< ${frame}`);\n        }\n\n        const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n        serverFrameHandler(frame);\n      },\n      // On Incoming Ping\n      () => {\n        this.debug('<<< PONG');\n      }\n    );\n\n    this._webSocket.onmessage = (evt: any) => {\n      this.debug('Received data');\n      this._lastServerActivityTS = Date.now();\n\n      if (this.logRawCommunication) {\n        const rawChunkAsString = (evt.data instanceof ArrayBuffer) ? new TextDecoder().decode(evt.data) : evt.data;\n        this.debug(`<<< ${rawChunkAsString}`);\n      }\n\n      parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n    };\n\n    this._webSocket.onclose = (closeEvent: CloseEvent): void => {\n      this.debug(`Connection closed to ${this._webSocket.url}`);\n      this.onWebSocketClose(closeEvent);\n      this._cleanUp();\n    };\n\n    this._webSocket.onerror = (errorEvent: Event): void => {\n      this.onWebSocketError(errorEvent);\n    };\n\n    this._webSocket.onopen = () => {\n      // Clone before updating\n      const connectHeaders = (Object as any).assign({}, this.connectHeaders);\n\n      this.debug('Web Socket Opened...');\n      connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n      connectHeaders['heart-beat'] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n      this._transmit({command: 'CONNECT', headers: connectHeaders});\n    };\n  }\n\n  private readonly _serverFrameHandlers: { [key: string]: frameCallbackType } = {\n\n    // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n    CONNECTED: (frame) => {\n      this.debug(`connected to server ${frame.headers.server}`);\n      this._connected = true;\n      this._connectedVersion = frame.headers.version;\n      // STOMP version 1.2 needs header values to be escaped\n      if (this._connectedVersion === Versions.V1_2) {\n        this._escapeHeaderValues = true;\n      }\n\n      this._setupHeartbeat(frame.headers);\n      this.onConnect(frame);\n    },\n\n    // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n    MESSAGE: (frame) => {\n      // the callback is registered when the client calls\n      // `subscribe()`.\n      // If there is no registered subscription for the received message,\n      // the default `onUnhandledMessage` callback is used that the client can set.\n      // This is useful for subscriptions that are automatically created\n      // on the browser side (e.g. [RabbitMQ's temporary\n      // queues](http://www.rabbitmq.com/stomp.html)).\n      const subscription = frame.headers.subscription;\n      const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n\n      // bless the frame to be a Message\n      const message = frame as IMessage;\n\n      const client = this;\n      const messageId = this._connectedVersion === Versions.V1_2 ? message.headers.ack : message.headers['message-id'];\n\n      // add `ack()` and `nack()` methods directly to the returned frame\n      // so that a simple call to `message.ack()` can acknowledge the message.\n      message.ack = (headers: StompHeaders = {}): void => {\n        return client.ack(messageId, subscription, headers);\n      };\n      message.nack = (headers: StompHeaders = {}): void => {\n        return client.nack(messageId, subscription, headers);\n      };\n      onReceive(message);\n    },\n\n    // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n    RECEIPT: (frame) => {\n      const callback = this._receiptWatchers[frame.headers['receipt-id']];\n      if (callback) {\n        callback(frame);\n        // Server will acknowledge only once, remove the callback\n        delete this._receiptWatchers[frame.headers['receipt-id']];\n      } else {\n        this.onUnhandledReceipt(frame);\n      }\n    },\n\n    // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n    ERROR: (frame) => {\n      this.onStompError(frame);\n    }\n  };\n\n  private _setupHeartbeat(headers: StompHeaders): void {\n    if ((headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2)) {\n      return;\n    }\n\n    // It is valid for the server to not send this header\n    // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n    if (!headers['heart-beat']) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = (headers['heart-beat']).split(',').map((v: string) => parseInt(v, 10));\n\n    if ((this.heartbeatOutgoing !== 0) && (serverIncoming !== 0)) {\n      const ttl: number = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        if (this._webSocket.readyState === WebSocketState.OPEN) {\n          this._webSocket.send(BYTE.LF);\n          this.debug('>>> PING');\n        }\n      }, ttl);\n    }\n\n    if ((this.heartbeatIncoming !== 0) && (serverOutgoing !== 0)) {\n      const ttl: number = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > (ttl * 2)) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._closeWebsocket();\n        }\n      }, ttl);\n    }\n  }\n\n  public _closeWebsocket() {\n    this._webSocket.onmessage = () => { }; // ignore messages\n    this._webSocket.close();\n  }\n\n  private _transmit(params: { command: string, headers?: StompHeaders,\n                              body?: string, binaryBody?: Uint8Array, skipContentLengthHeader?: boolean }): void {\n    const {command, headers, body, binaryBody, skipContentLengthHeader} = params;\n    const frame = new FrameImpl({\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader\n    });\n\n    let rawChunk = frame.serialize();\n\n    if (this.logRawCommunication) {\n      this.debug(`>>> ${rawChunk}`);\n    } else {\n      this.debug(`>>> ${frame}`);\n    }\n\n    if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n      rawChunk = new TextEncoder().encode(rawChunk);\n    }\n\n    if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n      this._webSocket.send(rawChunk);\n    } else {\n      let out = rawChunk as string;\n      while (out.length > 0) {\n        const chunk = out.substring(0, this.maxWebSocketChunkSize);\n        out = out.substring(this.maxWebSocketChunkSize);\n        this._webSocket.send(chunk);\n        this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n      }\n    }\n  }\n\n  public dispose(): void {\n    if (this.connected) {\n      try {\n        // clone before updating\n        const disconnectHeaders = (Object as any).assign({}, this.disconnectHeaders);\n\n        if (!disconnectHeaders.receipt) {\n          disconnectHeaders.receipt = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(disconnectHeaders.receipt, (frame) => {\n          this._closeWebsocket();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({command: 'DISCONNECT', headers: disconnectHeaders});\n      } catch (error) {\n        this.debug(`Ignoring error during disconnect ${error}`);\n      }\n    } else {\n      if (this._webSocket.readyState === WebSocketState.CONNECTING\n            || this._webSocket.readyState === WebSocketState.OPEN) {\n        this._closeWebsocket();\n      }\n    }\n  }\n\n  private _cleanUp() {\n    this._connected = false;\n\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n\n  public publish(params: IPublishParams): void {\n    const {destination, headers, body, binaryBody, skipContentLengthHeader} = params;\n    const hdrs: StompHeaders = (Object as any).assign({destination}, headers);\n    this._transmit({\n      command: 'SEND',\n      headers: hdrs,\n      body,\n      binaryBody,\n      skipContentLengthHeader\n    });\n  }\n\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._receiptWatchers[receiptId] = callback;\n  }\n\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    headers = (Object as any).assign({}, headers);\n\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({command: 'SUBSCRIBE', headers});\n    const client = this;\n    return {\n      id: headers.id,\n\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      }\n    };\n  }\n\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    headers = (Object as any).assign({}, headers);\n\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({command: 'UNSUBSCRIBE', headers});\n  }\n\n  public begin(transactionId: string): ITransaction {\n    const txId = transactionId || (`tx-${this._counter++}`);\n    this._transmit({\n      command: 'BEGIN', headers: {\n        transaction: txId\n      }\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit(): void {\n        client.commit(txId);\n      },\n      abort(): void {\n        client.abort(txId);\n      }\n    };\n  }\n\n  public commit(transactionId: string): void {\n    this._transmit({\n      command: 'COMMIT', headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public abort(transactionId: string): void {\n    this._transmit({\n      command: 'ABORT', headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    headers = (Object as any).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({command: 'ACK', headers});\n  }\n\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    headers = (Object as any).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({command: 'NACK', headers});\n  }\n\n}\n","/**\n * STOMP headers. Many functions calls will accept headers as parameters.\n * The headers sent by Broker will be available as [IFrame#headers]{@link IFrame#headers}.\n *\n * `key` and `value` must be valid strings.\n * In addition, `key` must not contain `CR`, `LF`, or `:`.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompHeaders { [key: string]: string }\n","import {StompHeaders} from './stomp-headers';\n\n/**\n * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompSubscription {\n  /**\n   * Id associated with this subscription.\n   */\n  public id: string;\n\n  /**\n   * Unsubscribe. See [Client#unsubscribe]{@link Client#unsubscribe} for an example.\n   */\n  public unsubscribe: (headers?: StompHeaders) => void;\n}\n","/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Versions {\n  /**\n   * Indicates protocol version 1.0\n   */\n  public static V1_0 = '1.0';\n  /**\n   * Indicates protocol version 1.1\n   */\n  public static V1_1 = '1.1';\n  /**\n   * Indicates protocol version 1.2\n   */\n  public static V1_2 = '1.2';\n\n  /**\n   * @internal\n   */\n  public static default = new Versions([Versions.V1_0, Versions.V1_1, Versions.V1_2]);\n\n  /**\n   * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n   *\n   * You will an instance if this class if you want to override supported versions to be declared during\n   * STOMP handshake.\n   */\n  constructor(public versions: string[]) {\n  }\n\n  /**\n   * Used as part of CONNECT STOMP Frame\n   */\n  public supportedVersions() {\n    return this.versions.join(',');\n  }\n\n  /**\n   * Used while creating a WebSocket\n   */\n  public protocolVersions() {\n    return this.versions.map((x) => `v${x.replace('.', '')}.stomp`);\n  }\n}\n","/**\n * Possible states for the WebSocket, copied here to avoid dependency on WebSocket class\n *\n * Part of `@stomp/rx-stomp`\n *\n * @internal\n */\nexport enum WebSocketState {\n  CONNECTING,\n  OPEN,\n  CLOSING,\n  CLOSED\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}